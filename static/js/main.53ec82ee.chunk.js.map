{"version":3,"sources":["maze/generators/depth-first-search.ts","maze/generators/recursive-division.ts","search/methods/bidirectional-bfs.ts","utils/random.ts","utils/Vec2d.ts","maze/index.ts","maze/Maze.ts","maze/generators/prims.ts","maze/generators/binary-tree.ts","maze/generators/index.ts","maze/generators/random.ts","search/index.ts","search/methods/utils/Queue.ts","search/methods/breadth-first-search.ts","Components/PathFinder.tsx","search/methods/greedy-best-first-search.ts","search/methods/dijkstra.ts","search/methods/a-star.ts","search/methods/depth-first-search.ts","search/methods/index.ts","Components/utils/sleep.ts","Components/Controls.tsx","Components/Maze.tsx","index.tsx"],"names":["maze","Direction","nodeHistory","random","max","Math","floor","randomEven","ceil","randomElement","elements","length","shuffle","arr","currIdx","randIdx","Vec2d","x","y","v","this","from","to","DIRECTIONS","dx","dy","getAdjacentMazePositions","pos","dist","map","add","getAdjacentPositions","filter","isWithinBounds","getAdjacentWallPositions","isWall","getAdjacentPathPositions","findEmptySquareInBounds","square","Maze","numCols","numRows","walls","Set","weights","Map","isWeight","has","toString","toggleWalls","positions","clone","Error","delete","get","weight","set","empty","row","col","push","prims","name","generate","cols","rows","full","frontier","origin","some","cell","toggleWall","adjPath","randomPath","binaryTree","wallLeftOrUp","start","dfs","visited","neighbour","hash","f","depthFirstSearch","divide","width","height","xy","vertical","gap","wallFrom","wallTo","direction","equals","generators","recursiveDivision","rewind","node","path","prev","unshift","Queue","items","isEmpty","shift","size","breadthFirstSearch","search","target","queue","dequeue","current","found","enqueue","isWeighted","DragType","biDirBfs","Forward","Backward","visitedForward","visitedBackward","neighbourNode","intersection","n","sort","defaultRewind","reverse","PriorityQueue","comparator","a","b","manhattanDistance","initialValues","abs","greedyBestFirstSearch","dijkstra","distance","getWeight","distFromStart","distToTarget","euclideanDistance","sqrt","aStar","params","methods","biDirectionalBfs","greedBestFirstSearch","sleep","ms","Promise","r","setTimeout","Controls","props","className","onChange","onMazeGeneratorSelect","value","selectedMazeGenerator","Object","entries","mazeGenerators","key","generator","onClick","onGenerateClick","disabled","isSearching","isGenerating","onClearClick","onSearchMethodSelect","selectedSearchMethod","searchMethods","method","onStopClick","onStartClick","MazeComponent","squares","getSquareClassName","data-weight","onMouseUp","onMouseDown","onMouseEnter","onDoubleClick","style","getInitialDrag","type","None","dragged","getInitialMaze","getInitialStart","getInitialTarget","getInitialVisited","getInitialSolution","PathFinder","mazeSize","mazeStyle","useState","setMaze","setStart","setTarget","setVisited","solution","setSolution","drag","setDrag","beginDrag","setDragPos","Date","now","setFinishedAt","setIsGenerating","mazeGenerator","setMazeGenerator","searchMethod","setSearchMethod","currentSearch","useRef","setCurrentSearch","s","_isSearching","setIsSearching","handleStartClick","generateSearch","next","done","state","handleClearClick","handleGenerateClick","outOfBounds","finalMaze","e","clearWeights","setWeight","Start","Target","Weight","Drawing","isStartOrTarget","undefined","removeWeight","ReactDOM","render","StrictMode","bodyPadding","parseInt","getComputedStyle","document","body","getPropertyValue","headerHeight","querySelector","squareWidth","documentElement","window","innerWidth","innerHeight","gridTemplateColumns","gridTemplateRows","buildPathFinderProps","getElementById"],"mappings":"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","file":"static/js/main.53ec82ee.chunk.js","sourcesContent":["import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\nimport { shuffle } from \"../../utils/random\";\nimport { getAdjacentWallPositions } from \"../\";\n\nlet maze: Maze;\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  const start = Vec2d.random(Vec2d.origin(), new Vec2d(cols, rows));\n  maze = Maze.full(cols, rows).toggleWall(start);\n  yield* dfs(start, new Set([start.toString()]));\n};\n\nconst dfs = function* (pos: Vec2d, visited: Set<string>): Generator<Maze> {\n  for (const neighbour of shuffle(getAdjacentWallPositions(maze, pos, 2))) {\n    const hash = neighbour.toString();\n\n    if (!visited.has(hash)) {\n      yield (maze = maze.toggleWalls([neighbour, new Vec2d((pos.x + neighbour.x) / 2, (pos.y + neighbour.y) / 2)]));\n      yield* dfs(neighbour, visited.add(hash));\n    }\n  }\n};\n\nconst depthFirstSearch = { name: \"Depth-first search\", generate };\n\nexport default depthFirstSearch;\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\nimport { randomEven } from \"../../utils/random\";\n\nlet maze: Maze;\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  maze = Maze.empty(cols, rows);\n\n  for (let col = 0; col < cols; ++col) {\n    yield (maze = maze.toggleWalls([new Vec2d(col, 0), new Vec2d(cols - col - 1, rows - 1)]));\n  }\n\n  for (let row = 1; row < rows - 1; ++row) {\n    yield (maze = maze.toggleWalls([new Vec2d(0, row), new Vec2d(cols - 1, rows - row - 1)]));\n  }\n\n  yield* divide(new Vec2d(1, 1), new Vec2d(cols - 2, rows - 2));\n};\n\nconst divide = function* (from: Vec2d, to: Vec2d): Generator<Maze> {\n  const width = to.x - from.x + 1;\n  const height = to.y - from.y + 1;\n\n  if (width < 3 || height < 3) {\n    return;\n  }\n\n  const vertical = width > height;\n  const xy = 1 + (vertical ? from.x + randomEven(width - 2) : from.y + randomEven(height - 2));\n  const gap = vertical ? new Vec2d(xy, from.y + randomEven(height)) : new Vec2d(from.x + randomEven(width), xy);\n  const wallFrom = vertical ? new Vec2d(xy, from.y) : new Vec2d(from.x, xy);\n  const wallTo = vertical ? new Vec2d(xy, to.y + 1) : new Vec2d(to.x + 1, xy);\n  const direction = vertical ? new Vec2d(0, 1) : new Vec2d(1, 0);\n\n  let pos = wallFrom;\n  while (!pos.equals(wallTo)) {\n    if (!pos.equals(gap)) {\n      yield (maze = maze.toggleWall(pos));\n    }\n    pos = pos.add(direction);\n  }\n\n  if (vertical) {\n    yield* divide(from, new Vec2d(wallTo.x - 1, to.y));\n    yield* divide(new Vec2d(wallTo.x + 1, from.y), to);\n  } else {\n    yield* divide(from, new Vec2d(to.x, wallTo.y - 1));\n    yield* divide(new Vec2d(from.x, wallTo.y + 1), to);\n  }\n};\n\nconst recursiveDivision = { name: \"Recursive division\", generate };\n\nexport default recursiveDivision;\n","import { SearchNode, SearchParams, SearchState, rewind as defaultRewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Queue from \"./utils/Queue\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nenum Direction {\n  Forward,\n  Backward,\n}\n\ntype BiDirSearchNode = {\n  node: SearchNode;\n  direction: Direction;\n};\n\nlet nodeHistory: BiDirSearchNode[];\n\nconst search = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  nodeHistory = [];\n\n  const queue = new Queue<BiDirSearchNode>([\n    {\n      node: { pos: start },\n      direction: Direction.Forward,\n    },\n    {\n      node: { pos: target },\n      direction: Direction.Backward,\n    },\n  ]);\n  const visitedForward = new Set<string>();\n  const visitedBackward = new Set<string>();\n\n  while (!queue.isEmpty()) {\n    const { node, direction } = queue.dequeue();\n    const hash = node.pos.toString();\n    let found;\n\n    switch (direction) {\n      case Direction.Forward:\n        if (visitedForward.has(hash)) continue;\n        found = visitedBackward.has(hash);\n        visitedForward.add(hash);\n        break;\n\n      case Direction.Backward:\n        if (visitedBackward.has(hash)) continue;\n        found = visitedForward.has(hash);\n        visitedBackward.add(hash);\n        break;\n    }\n\n    yield { current: node, visited: new Set([...visitedForward, ...visitedBackward]), found };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      const neighbourNode = {\n        node: {\n          pos: neighbour,\n          prev: node,\n        },\n        direction,\n      };\n\n      nodeHistory.push(neighbourNode);\n      queue.enqueue(neighbourNode);\n    }\n  }\n};\n\nconst rewind = (node: SearchNode): Vec2d[] => {\n  const intersection = nodeHistory\n    .filter(({ node: n }) => node.pos.equals(n.pos))\n    .sort(({ direction }) => (direction === Direction.Forward ? -1 : 1));\n\n  return [\n    ...defaultRewind(intersection[0].node),\n    ...defaultRewind(intersection[intersection.length - 1].node).reverse(),\n  ];\n};\n\nconst biDirBfs = { name: \"Bidirectional BFS\", search, rewind, isWeighted: false };\n\nexport default biDirBfs;\n","export const random = (max: number): number => Math.floor(Math.random() * max);\n\nexport const randomEven = (max: number): number => 2 * random(Math.ceil(max / 2));\n\nexport const randomElement = <T>(elements: T[]): T => elements[random(elements.length)];\n\nexport const shuffle = <T>(arr: T[]): T[] => {\n  let currIdx = arr.length;\n\n  while (currIdx > 0) {\n    const randIdx = random(currIdx--);\n    [arr[currIdx], arr[randIdx]] = [arr[randIdx], arr[currIdx]];\n  }\n\n  return arr;\n};\n","import { random } from \"./random\";\n\nexport default class Vec2d {\n  constructor(readonly x: number, readonly y: number) {}\n\n  public add(v: Vec2d): Vec2d {\n    return new Vec2d(this.x + v.x, this.y + v.y);\n  }\n\n  public equals(v: Vec2d): boolean {\n    return this.x === v.x && this.y === v.y;\n  }\n\n  public toString(): string {\n    return `(${this.x}, ${this.y})`;\n  }\n\n  public static origin(): Vec2d {\n    return new Vec2d(0, 0);\n  }\n\n  public static random(from: Vec2d, to: Vec2d): Vec2d {\n    return new Vec2d(from.x + random(to.x - from.x), from.y + random(to.y - from.y));\n  }\n}\n","import Maze from \"./Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nconst DIRECTIONS = [\n  { dx: 1, dy: 0 },\n  { dx: 0, dy: 1 },\n  { dx: -1, dy: 0 },\n  { dx: 0, dy: -1 },\n];\n\nconst getAdjacentPositions = (pos: Vec2d, dist: number): Vec2d[] =>\n  DIRECTIONS.map(({ dx, dy }) => pos.add(new Vec2d(dx * dist, dy * dist)));\n\nconst getAdjacentMazePositions = (maze: Maze, pos: Vec2d, dist: number): Vec2d[] =>\n  getAdjacentPositions(pos, dist).filter((pos) => maze.isWithinBounds(pos));\n\nexport const getAdjacentWallPositions = (maze: Maze, pos: Vec2d, dist: number = 1): Vec2d[] =>\n  getAdjacentMazePositions(maze, pos, dist).filter((pos) => maze.isWall(pos));\n\nexport const getAdjacentPathPositions = (maze: Maze, pos: Vec2d, dist: number = 1): Vec2d[] =>\n  getAdjacentMazePositions(maze, pos, dist).filter((pos) => !maze.isWall(pos));\n\nexport const findEmptySquareInBounds = (maze: Maze, from: Vec2d, to: Vec2d): Vec2d => {\n  let square;\n\n  do square = Vec2d.random(from, to);\n  while (maze.isWall(square));\n\n  return square;\n};\n","import Vec2d from \"../utils/Vec2d\";\n\nexport default class Maze {\n  private walls = new Set<string>();\n  private weights = new Map<string, number>();\n\n  private constructor(readonly numCols: number, readonly numRows: number) {}\n\n  public static empty(numCols: number, numRows: number): Maze {\n    return new Maze(numCols, numRows);\n  }\n\n  public static full(numCols: number, numRows: number): Maze {\n    const walls = [];\n\n    for (let row = 0; row < numRows; ++row) {\n      for (let col = 0; col < numCols; ++col) {\n        walls.push(new Vec2d(col, row));\n      }\n    }\n\n    return Maze.empty(numCols, numRows).toggleWalls(walls);\n  }\n\n  public isEmpty(pos: Vec2d): boolean {\n    return !this.isWall(pos) && !this.isWeight(pos);\n  }\n\n  public isWall(pos: Vec2d): boolean {\n    return this.walls.has(pos.toString());\n  }\n\n  public toggleWall(pos: Vec2d): Maze {\n    return this.toggleWalls([pos]);\n  }\n\n  public toggleWalls(positions: Vec2d[]): Maze {\n    const maze = this.clone();\n\n    for (const pos of positions) {\n      if (!this.isWithinBounds(pos)) {\n        throw new Error(`Out of bounds: ${pos.toString()}`);\n      }\n\n      if (maze.isWall(pos)) {\n        maze.walls.delete(pos.toString());\n      } else {\n        maze.walls.add(pos.toString());\n      }\n    }\n\n    return maze;\n  }\n\n  public isWeight(pos: Vec2d): boolean {\n    return this.weights.has(pos.toString());\n  }\n\n  public getWeight(pos: Vec2d): number | undefined {\n    return this.weights.get(pos.toString());\n  }\n\n  public setWeight(pos: Vec2d, weight: number): Maze {\n    const maze = this.clone();\n    maze.weights.set(pos.toString(), weight);\n    maze.walls.delete(pos.toString());\n    return maze;\n  }\n\n  public removeWeight(pos: Vec2d): Maze {\n    const maze = this.clone();\n    maze.weights.delete(pos.toString());\n    return maze;\n  }\n\n  public clearWeights(): Maze {\n    const maze = this.clone();\n    maze.weights = new Map<string, number>();\n    return maze;\n  }\n\n  public isWithinBounds(pos: Vec2d): boolean {\n    return pos.x >= 0 && pos.y >= 0 && pos.x < this.numCols && pos.y < this.numRows;\n  }\n\n  private clone(): Maze {\n    const maze = Maze.empty(this.numCols, this.numRows);\n    maze.walls = new Set([...this.walls]);\n    maze.weights = new Map([...this.weights]);\n    return maze;\n  }\n}\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\nimport { randomElement } from \"../../utils/random\";\nimport { getAdjacentWallPositions, getAdjacentPathPositions } from \"../\";\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  let maze = Maze.full(cols, rows);\n  const frontier = [Vec2d.random(Vec2d.origin(), new Vec2d(cols, rows))];\n\n  // eslint-disable-next-line no-loop-func\n  while (frontier.some((pos) => maze.isWall(pos))) {\n    // eslint-disable-next-line no-loop-func\n    const cell = randomElement(frontier.filter((pos) => maze.isWall(pos)));\n    maze = maze.toggleWall(cell);\n\n    const adjPath = getAdjacentPathPositions(maze, cell, 2);\n    if (adjPath.length > 0) {\n      const randomPath = randomElement(adjPath);\n      yield (maze = maze.toggleWall(new Vec2d((cell.x + randomPath.x) / 2, (cell.y + randomPath.y) / 2)));\n    }\n\n    frontier.push(...getAdjacentWallPositions(maze, cell, 2));\n  }\n};\n\nconst prims = { name: \"Prims\", generate };\n\nexport default prims;\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\nimport { random } from \"../../utils/random\";\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  let maze = Maze.empty(cols, rows);\n\n  for (let row = 2; row < rows; row += 2) {\n    for (let col = 2; col < cols; col += 2) {\n      const wallLeftOrUp = [new Vec2d(col - 1, row), new Vec2d(col, row - 1)];\n      yield (maze = maze.toggleWalls([wallLeftOrUp[random(2)], new Vec2d(col - 1, row - 1)]));\n    }\n  }\n};\n\nconst binaryTree = { name: \"Binary tree\", generate };\n\nexport default binaryTree;\n","import Maze from \"../Maze\";\nimport prims from \"./prims\";\nimport binaryTree from \"./binary-tree\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport recursiveDivision from \"./recursive-division\";\nimport random from \"./random\";\n\ntype MazeGenerator = {\n  name: string;\n  generate: (cols: number, rows: number) => Generator<Maze>;\n};\n\nconst generators: { [key: string]: MazeGenerator } = { prims, binaryTree, recursiveDivision, depthFirstSearch, random };\n\nexport default generators;\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst WALL_PROBABILITY = 1 / 4;\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  let maze = Maze.empty(cols, rows);\n\n  for (let row = 0; row < rows; ++row) {\n    for (let col = 0; col < cols; ++col) {\n      if (Math.random() < WALL_PROBABILITY) {\n        yield (maze = maze.toggleWall(new Vec2d(col, row)));\n      }\n    }\n  }\n};\n\nconst random = { name: \"Random\", generate };\n\nexport default random;\n","import Maze from \"../maze/Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nexport type SearchParams = {\n  maze: Maze;\n  start: Vec2d;\n  target: Vec2d;\n};\n\nexport type SearchNode = {\n  pos: Vec2d;\n  prev?: SearchNode;\n};\n\nexport type SearchState = {\n  current: SearchNode;\n  visited: Set<string>;\n  found: boolean;\n};\n\nexport const rewind = (node: SearchNode): Vec2d[] => {\n  const path = [];\n\n  while (node.prev) {\n    path.unshift(node.pos);\n    node = node.prev;\n  }\n\n  return path;\n};\n","export default class Queue<T> {\n  constructor(private items: T[] = []) {}\n\n  public enqueue(...items: T[]): void {\n    this.items.push(...items);\n  }\n\n  public dequeue(): T {\n    if (this.isEmpty()) {\n      throw new Error(\"Cannot dequeue empty queue\");\n    }\n\n    return this.items.shift() as T;\n  }\n\n  public isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  public get size(): number {\n    return this.items.length;\n  }\n}\n","import { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Queue from \"./utils/Queue\";\n\nconst search = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const queue = new Queue<SearchNode>([{ pos: start }]);\n  const visited = new Set<string>();\n\n  while (!queue.isEmpty()) {\n    const node = queue.dequeue();\n    const hash = node.pos.toString();\n\n    if (visited.has(hash)) {\n      continue;\n    }\n\n    yield { current: node, visited: visited.add(hash), found: target.equals(node.pos) };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      queue.enqueue({ pos: neighbour, prev: node });\n    }\n  }\n};\n\nconst breadthFirstSearch = { name: \"Breadth-first search\", search, rewind, isWeighted: false };\n\nexport default breadthFirstSearch;\n","import React, { useRef, useState } from \"react\";\nimport { findEmptySquareInBounds } from \"../maze\";\nimport Maze from \"../maze/Maze\";\nimport mazeGenerators from \"../maze/generators\";\nimport searchMethods from \"../search/methods\";\nimport Vec2d from \"../utils/Vec2d\";\nimport sleep from \"./utils/sleep\";\nimport Controls from \"./Controls\";\nimport MazeComponent from \"./Maze\";\n\ntype PathFinderProps = {\n  mazeSize: {\n    cols: number;\n    rows: number;\n  };\n  mazeStyle: React.CSSProperties;\n};\n\nenum DragType {\n  None,\n  Start,\n  Target,\n  Weight,\n  Drawing,\n}\n\ntype Drag = {\n  type: DragType;\n  dragged: boolean;\n  pos?: Vec2d;\n};\n\nconst getInitialDrag = (): Drag => ({ type: DragType.None, dragged: false });\nconst getInitialMaze = (cols: number, rows: number) => Maze.empty(cols, rows);\nconst getInitialStart = (cols: number, rows: number) => new Vec2d(Math.floor(cols / 4) - 1, Math.floor(rows / 2));\nconst getInitialTarget = (cols: number, rows: number) => new Vec2d(cols - Math.floor(cols / 4), Math.floor(rows / 2));\nconst getInitialVisited = () => new Set<string>();\nconst getInitialSolution = () => new Set<string>();\n\nconst PathFinder = ({ mazeSize: { cols, rows }, mazeStyle }: PathFinderProps): JSX.Element => {\n  const [maze, setMaze] = useState(getInitialMaze(cols, rows));\n  const [start, setStart] = useState(getInitialStart(cols, rows));\n  const [target, setTarget] = useState(getInitialTarget(cols, rows));\n  const [visited, setVisited] = useState(getInitialVisited());\n  const [solution, setSolution] = useState(getInitialSolution());\n\n  const [drag, setDrag] = useState(getInitialDrag());\n  const beginDrag = (type: DragType, pos: Vec2d): void => setDrag({ type, dragged: false, pos });\n  const setDragPos = (pos: Vec2d): void => setDrag({ ...drag, dragged: true, pos });\n\n  const [, setFinishedAt] = useState(Date.now);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const [mazeGenerator, setMazeGenerator] = useState(\"recursiveDivision\");\n  const [searchMethod, setSearchMethod] = useState(\"breadthFirstSearch\");\n\n  const currentSearch = useRef<Generator | null>(null);\n  const hasCurrentSearch = (): boolean => currentSearch.current !== null;\n  const setCurrentSearch = (s: Generator | null): void => void (currentSearch.current = s);\n\n  const _isSearching = useRef(false);\n  const isSearching = (): boolean => _isSearching.current;\n  const setIsSearching = (r: boolean): void => void (_isSearching.current = r);\n\n  const handleMouseUp = (pos: Vec2d): void => {\n    if (isSearching()) return;\n\n    if (maze.isWeight(pos) && !drag.dragged) {\n      setMaze(maze.setWeight(pos, (maze.getWeight(pos) as number) + 1));\n    }\n\n    setDrag(getInitialDrag());\n  };\n\n  const handleMouseDown = (pos: Vec2d): void => {\n    if (isSearching()) return;\n\n    if (pos.equals(start)) {\n      return beginDrag(DragType.Start, pos);\n    }\n\n    if (pos.equals(target)) {\n      return beginDrag(DragType.Target, pos);\n    }\n\n    if (maze.isWeight(pos)) {\n      return beginDrag(DragType.Weight, pos);\n    }\n\n    beginDrag(DragType.Drawing, pos);\n    setMaze(maze.toggleWall(pos));\n  };\n\n  const handleMouseEnter = (pos: Vec2d): void => {\n    if (drag.type === DragType.None) return;\n\n    const isStartOrTarget = pos.equals(start) || pos.equals(target);\n    const isEmpty = maze.isEmpty(pos);\n\n    switch (drag.type) {\n      case DragType.Start:\n      case DragType.Target:\n        if (isEmpty && !isStartOrTarget) {\n          drag.type === DragType.Start ? setStart(pos) : setTarget(pos);\n          setDragPos(pos);\n        }\n\n        break;\n\n      case DragType.Weight:\n        if (isEmpty && !isStartOrTarget && drag.pos !== undefined) {\n          setMaze(maze.setWeight(pos, maze.getWeight(drag.pos) as number).removeWeight(drag.pos));\n          setDragPos(pos);\n        }\n\n        break;\n\n      case DragType.Drawing:\n        if (!isStartOrTarget && (isEmpty || maze.isWall(pos))) {\n          setMaze(maze.toggleWall(pos));\n          setDragPos(pos);\n        }\n    }\n  };\n\n  const handleDoubleClick = (pos: Vec2d): void => {\n    if (!searchMethods[searchMethod].isWeighted || isSearching() || pos.equals(start) || pos.equals(target)) {\n      return;\n    }\n\n    setMaze(maze.isWeight(pos) ? maze.removeWeight(pos) : maze.setWeight(pos, 5));\n  };\n\n  const handleStartClick = async (): Promise<void> => {\n    setIsSearching(true);\n\n    if (!hasCurrentSearch()) {\n      setCurrentSearch(generateSearch());\n      setSolution(getInitialSolution());\n    }\n\n    let next;\n\n    do {\n      // @ts-ignore\n      next = currentSearch.current.next();\n      if (next.value) next.value();\n      if (!isSearching()) return;\n      await sleep(10);\n    } while (!next.done);\n\n    setCurrentSearch(null);\n    setIsSearching(false);\n    setFinishedAt(Date.now);\n  };\n\n  const generateSearch = function* (): Generator<() => void> {\n    const method = searchMethods[searchMethod];\n\n    for (const state of method.search({ maze, start, target })) {\n      yield () => setVisited(new Set([...state.visited]));\n\n      if (state.found) {\n        const solution = getInitialSolution();\n        setSolution(solution);\n\n        for (const pos of method.rewind(state.current)) {\n          yield () => setSolution(new Set([...solution.add(pos.toString())]));\n        }\n\n        return;\n      }\n    }\n  };\n\n  const handleStopClick = (): void => setIsSearching(false);\n\n  const handleClearClick = (): void => {\n    setMaze(getInitialMaze(cols, rows));\n    setStart(getInitialStart(cols, rows));\n    setTarget(getInitialTarget(cols, rows));\n    setVisited(getInitialVisited());\n    setSolution(getInitialSolution());\n    setCurrentSearch(null);\n    setIsGenerating(false);\n    setIsSearching(false);\n  };\n\n  const handleGenerateClick = async (): Promise<void> => {\n    handleClearClick();\n    setIsGenerating(true);\n\n    const outOfBounds = new Vec2d(cols, rows);\n    setStart(outOfBounds);\n    setTarget(outOfBounds);\n\n    let finalMaze = maze;\n\n    for (const maze of mazeGenerators[mazeGenerator].generate(cols, rows)) {\n      setMaze(maze);\n      finalMaze = maze;\n      await sleep(10);\n    }\n\n    setStart(findEmptySquareInBounds(finalMaze, Vec2d.origin(), new Vec2d(Math.floor(cols / 3), rows)));\n    setTarget(findEmptySquareInBounds(finalMaze, new Vec2d(Math.floor((cols * 2) / 3), 0), new Vec2d(cols, rows)));\n    setIsGenerating(false);\n  };\n\n  const handleMazeGeneratorSelect = (e: any): void => setMazeGenerator(e.target.value);\n\n  const handleSearchMethodSelect = (e: any): void => {\n    if (!searchMethods[e.target.value].isWeighted) {\n      setMaze(maze.clearWeights());\n    }\n\n    setSearchMethod(e.target.value);\n  };\n\n  const getSquareClassName = (pos: Vec2d): string | undefined => {\n    if (maze.isWall(pos)) return \"is-wall\";\n    if (pos.equals(start)) return \"is-start\";\n    if (pos.equals(target)) return \"is-target\";\n    if (solution.has(pos.toString())) return \"is-solution\";\n    if (visited.has(pos.toString())) return \"is-visited\";\n  };\n\n  return (\n    <div\n      className={`PathFinder${\n        isGenerating ? \" is-generating is-\" + mazeGenerator : isSearching() ? \" is-searching\" : \"\"\n      }`}\n    >\n      <Controls\n        isGenerating={isGenerating}\n        isSearching={isSearching()}\n        isWeighted={searchMethods[searchMethod].isWeighted}\n        onStartClick={handleStartClick}\n        onStopClick={handleStopClick}\n        onClearClick={handleClearClick}\n        onGenerateClick={handleGenerateClick}\n        selectedMazeGenerator={mazeGenerator}\n        selectedSearchMethod={searchMethod}\n        onMazeGeneratorSelect={handleMazeGeneratorSelect}\n        onSearchMethodSelect={handleSearchMethodSelect}\n      />\n      <MazeComponent\n        maze={maze}\n        style={mazeStyle}\n        getSquareClassName={getSquareClassName}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n        onDoubleClick={handleDoubleClick}\n      />\n    </div>\n  );\n};\n\nexport default PathFinder;\n","import PriorityQueue from \"ts-priority-queue\";\nimport { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst search = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const queue = new PriorityQueue<SearchNode>({\n    comparator: (a, b) => manhattanDistance(a.pos, target) - manhattanDistance(b.pos, target),\n    initialValues: [{ pos: start }],\n  });\n  const visited = new Set<string>();\n\n  while (queue.length > 0) {\n    const node = queue.dequeue();\n    const hash = node.pos.toString();\n\n    if (visited.has(hash)) {\n      continue;\n    }\n\n    yield { current: node, visited: visited.add(hash), found: target.equals(node.pos) };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      queue.queue({ pos: neighbour, prev: node });\n    }\n  }\n};\n\nconst manhattanDistance = (a: Vec2d, b: Vec2d): number => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\nconst greedyBestFirstSearch = { name: \"Greedy best-first search\", search, rewind, isWeighted: false };\n\nexport default greedyBestFirstSearch;\n","import PriorityQueue from \"ts-priority-queue\";\nimport { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\n\ntype DijkstraSearchNode = SearchNode & { distance: number };\n\nconst search = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const queue = new PriorityQueue<DijkstraSearchNode>({\n    comparator: (a, b) => a.distance - b.distance,\n    initialValues: [{ pos: start, distance: 0 }],\n  });\n  const visited = new Set<string>();\n\n  while (queue.length > 0) {\n    const node = queue.dequeue();\n    const hash = node.pos.toString();\n\n    if (visited.has(hash)) {\n      continue;\n    }\n\n    yield { current: node, visited: visited.add(hash), found: target.equals(node.pos) };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      queue.queue({\n        pos: neighbour,\n        prev: node,\n        distance: node.distance + (maze.getWeight(neighbour) || 1),\n      });\n    }\n  }\n};\n\nconst dijkstra = { name: \"Dijkstra\", search, rewind, isWeighted: true };\n\nexport default dijkstra;\n","import PriorityQueue from \"ts-priority-queue\";\nimport { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\ntype AStarSearchNode = SearchNode & {\n  distFromStart: number;\n  distToTarget: number;\n};\n\nconst search = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const queue = new PriorityQueue<AStarSearchNode>({\n    comparator: (a, b) => a.distFromStart - b.distFromStart + a.distToTarget - b.distToTarget,\n    initialValues: [{ pos: start, distFromStart: 0, distToTarget: 0 }],\n  });\n  const visited = new Set<string>();\n\n  while (queue.length > 0) {\n    const node = queue.dequeue();\n    const hash = node.pos.toString();\n\n    if (visited.has(hash)) {\n      continue;\n    }\n\n    yield { current: node, visited: visited.add(hash), found: target.equals(node.pos) };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      queue.queue({\n        pos: neighbour,\n        prev: node,\n        distFromStart: node.distFromStart + (maze.getWeight(neighbour) || 1),\n        distToTarget: euclideanDistance(neighbour, target),\n      });\n    }\n  }\n};\n\nconst euclideanDistance = (a: Vec2d, b: Vec2d): number =>\n  Math.sqrt(Math.abs(a.x - b.x) ** 2 + Math.abs(a.y - b.y) ** 2);\n\nconst aStar = { name: \"A*\", search, rewind, isWeighted: true };\n\nexport default aStar;\n","import { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\n\nconst search = function* (params: SearchParams): Generator<SearchState> {\n  yield* dfs({ pos: params.start }, new Set(), params);\n};\n\nconst dfs = function* (node: SearchNode, visited: Set<string>, params: SearchParams): Generator<SearchState> {\n  const hash = node.pos.toString();\n\n  if (visited.has(hash)) {\n    return;\n  }\n\n  yield { current: node, visited: visited.add(hash), found: params.target.equals(node.pos) };\n\n  for (const neighbour of getAdjacentPathPositions(params.maze, node.pos)) {\n    yield* dfs({ pos: neighbour, prev: node }, visited, params);\n  }\n};\n\nconst depthFirstSearch = { name: \"Depth-first search\", search, rewind, isWeighted: false };\n\nexport default depthFirstSearch;\n","import { SearchNode, SearchParams, SearchState } from \"../\";\nimport breadthFirstSearch from \"./breadth-first-search\";\nimport biDirectionalBfs from \"./bidirectional-bfs\";\nimport greedBestFirstSearch from \"./greedy-best-first-search\";\nimport dijkstra from \"./dijkstra\";\nimport aStar from \"./a-star\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport Vec2d from \"../../utils/Vec2d\";\n\ntype SearchMethod = {\n  name: string;\n  search: (params: SearchParams) => Generator<SearchState>;\n  rewind: (node: SearchNode) => Vec2d[];\n  isWeighted: boolean;\n};\n\nconst methods: { [key: string]: SearchMethod } = {\n  breadthFirstSearch,\n  biDirectionalBfs,\n  greedBestFirstSearch,\n  dijkstra,\n  aStar,\n  depthFirstSearch,\n};\n\nexport default methods;\n","const sleep = async (ms: number): Promise<void> => {\n  await new Promise((r) => setTimeout(r, ms));\n};\n\nexport default sleep;\n","import { FormEvent } from \"react\";\nimport mazeGenerators from \"../maze/generators\";\nimport searchMethods from \"../search/methods\";\n\ntype ControlsProps = {\n  isGenerating: boolean;\n  isSearching: boolean;\n  isWeighted: boolean;\n  onStartClick: () => void;\n  onStopClick: () => void;\n  onClearClick: () => void;\n  onGenerateClick: () => void;\n  selectedMazeGenerator: string;\n  selectedSearchMethod: string;\n  onMazeGeneratorSelect: (e: FormEvent<HTMLSelectElement>) => void;\n  onSearchMethodSelect: (e: FormEvent<HTMLSelectElement>) => void;\n};\n\nconst Controls = (props: ControlsProps): JSX.Element => (\n  <div className=\"Controls\">\n    <fieldset>\n      <legend>Maze generator</legend>\n      <select onChange={props.onMazeGeneratorSelect} value={props.selectedMazeGenerator}>\n        {Object.entries(mazeGenerators).map(([key, generator]) => (\n          <option key={key} value={key}>\n            {generator.name}\n          </option>\n        ))}\n      </select>\n      <button onClick={props.onGenerateClick} disabled={props.isSearching || props.isGenerating}>\n        Generate\n      </button>\n      <button onClick={props.onClearClick} disabled={props.isSearching || props.isGenerating}>\n        Clear\n      </button>\n    </fieldset>\n    <fieldset>\n      <legend>Search method</legend>\n      <select onChange={props.onSearchMethodSelect} value={props.selectedSearchMethod}>\n        {Object.entries(searchMethods).map(([key, method]) => (\n          <option key={key} value={key}>\n            {method.name}\n          </option>\n        ))}\n      </select>\n      {props.isWeighted && (\n        <em>\n          <small>Double click to add weights!</small>\n        </em>\n      )}\n      <button onClick={props.isSearching ? props.onStopClick : props.onStartClick} disabled={props.isGenerating}>\n        {props.isSearching ? \"Stop\" : \"Start\"}\n      </button>\n    </fieldset>\n  </div>\n);\n\nexport default Controls;\n","import React from \"react\";\nimport Maze from \"../maze/Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\ntype MazeProps = {\n  maze: Maze;\n  style: React.CSSProperties;\n  getSquareClassName: (pos: Vec2d) => string | undefined;\n  onMouseUp: (pos: Vec2d) => void;\n  onMouseDown: (pos: Vec2d) => void;\n  onMouseEnter: (pos: Vec2d) => void;\n  onDoubleClick: (pos: Vec2d) => void;\n};\n\nconst MazeComponent = (props: MazeProps): JSX.Element => {\n  const squares = [];\n\n  for (let row = 0; row < props.maze.numRows; ++row) {\n    for (let col = 0; col < props.maze.numCols; ++col) {\n      const pos = new Vec2d(col, row);\n\n      squares.push(\n        <div\n          key={pos.toString()}\n          className={props.getSquareClassName(pos)}\n          data-weight={props.maze.getWeight(pos)}\n          onMouseUp={() => props.onMouseUp(pos)}\n          onMouseDown={() => props.onMouseDown(pos)}\n          onMouseEnter={() => props.onMouseEnter(pos)}\n          onDoubleClick={() => props.onDoubleClick(pos)}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"Maze\" style={props.style}>\n      {squares}\n    </div>\n  );\n};\n\nexport default MazeComponent;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PathFinder from \"./Components/PathFinder\";\nimport \"./index.css\";\n\nconst buildPathFinderProps = () => {\n  // @ts-ignore\n  const bodyPadding = parseInt(getComputedStyle(document.body).getPropertyValue(\"padding-left\"));\n  // @ts-ignore\n  const headerHeight = parseInt(getComputedStyle(document.querySelector(\"header\")).getPropertyValue(\"height\"));\n  const squareWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue(\"--square-width\"));\n\n  const cols = Math.floor((window.innerWidth - 2 * bodyPadding) / squareWidth);\n  const rows = Math.max(5, Math.floor((window.innerHeight - 3 * headerHeight) / squareWidth));\n\n  return {\n    mazeSize: { cols, rows },\n    mazeStyle: {\n      gridTemplateColumns: `repeat(${cols}, ${squareWidth}px)`,\n      gridTemplateRows: `repeat(${rows}, ${squareWidth}px)`,\n    },\n  };\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathFinder {...buildPathFinderProps()} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}