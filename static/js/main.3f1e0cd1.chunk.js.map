{"version":3,"sources":["search/methods/bidirectional-bfs.ts","utils/Vec2d.ts","maze/index.ts","maze/Maze.ts","maze/generators/index.ts","maze/generators/random.ts","search/index.ts","search/methods/utils/Queue.ts","search/methods/breadth-first-search.ts","Components/PathFinder.tsx","search/methods/greedy-best-first-search.ts","search/methods/depth-first-search.ts","search/methods/index.ts","Components/utils/sleep.ts","Components/Controls.tsx","Components/Maze.tsx","index.tsx"],"names":["Direction","nodeHistory","Vec2d","x","y","v","this","from","to","Math","floor","random","getNeighbours","maze","pos","neighbours","dx","dy","neighbour","add","isWithinBounds","isWall","push","findEmptySquareInBounds","square","Maze","numCols","numRows","walls","Set","Error","toString","delete","has","generators","name","generate","cols","rows","row","col","toggleWall","rewind","node","path","prev","unshift","Queue","items","isEmpty","shift","size","length","bfs","start","target","visited","queue","dequeue","current","found","equals","hash","enqueue","f","MovingState","biDirBfs","visitedForward","visitedBackward","direction","Forward","Backward","neighbourNode","intersection","filter","n","sort","defaultRewind","reverse","manhattanDistance","a","b","abs","greedyBestFirstSearch","PriorityQueue","comparator","initialValues","dfs","params","methods","breadthFirstSearch","biDirectionalBfs","greedBestFirstSearch","depthFirstSearch","sleep","ms","Promise","r","setTimeout","Controls","props","className","onClick","isRunning","onStopClick","onStartClick","onClearClick","disabled","onGenerateClick","onChange","onSearchMethodSelect","value","selectedSearchMethod","Object","entries","map","key","method","squares","getSquareClassName","onMouseUp","onMouseDown","onMouseEnter","style","getInitialMaze","getInitialStart","getInitialTarget","getInitialVisited","getInitialSolution","PathFinder","mazeSize","mazeStyle","useState","setMaze","setStart","setTarget","setVisited","solution","setSolution","searchMethod","setSearchMethod","None","moving","setMoving","isDrawing","setIsDrawing","Date","now","setStopTime","search","useRef","running","setRunning","handleStartClick","generateSearch","next","done","searchMethods","state","handleClearClick","mazeGenerators","origin","e","Start","Target","ReactDOM","render","StrictMode","bodyPadding","parseInt","getComputedStyle","document","body","getPropertyValue","headerHeight","querySelector","squareWidth","documentElement","window","innerWidth","innerHeight","gridTemplateColumns","gridTemplateRows","buildPathFinderProps","getElementById"],"mappings":"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","file":"static/js/main.3f1e0cd1.chunk.js","sourcesContent":["import { SearchNode, SearchParams, SearchState, rewind as defaultRewind } from \"../\";\nimport { getNeighbours } from \"../../maze\";\nimport Queue from \"./utils/Queue\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nenum Direction {\n  Forward,\n  Backward,\n}\n\ntype BiDirSearchNode = {\n  node: SearchNode;\n  direction: Direction;\n};\n\nlet nodeHistory: BiDirSearchNode[];\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  nodeHistory = [];\n\n  const visitedForward = new Set<string>([start.toString()]);\n  const visitedBackward = new Set<string>([target.toString()]);\n\n  const queue = new Queue<BiDirSearchNode>([\n    {\n      node: { pos: start },\n      direction: Direction.Forward,\n    },\n    {\n      node: { pos: target },\n      direction: Direction.Backward,\n    },\n  ]);\n\n  while (!queue.isEmpty()) {\n    const { node, direction } = queue.dequeue();\n\n    const found =\n      (direction === Direction.Forward && visitedBackward.has(node.pos.toString())) ||\n      (direction === Direction.Backward && visitedForward.has(node.pos.toString()));\n\n    yield { current: node, visited: new Set([...visitedForward, ...visitedBackward]), found };\n\n    for (const neighbour of getNeighbours(maze, node.pos)) {\n      const hash = neighbour.toString();\n      let enqueue = false;\n\n      if (direction === Direction.Forward) {\n        if (!visitedForward.has(hash)) {\n          visitedForward.add(hash);\n          enqueue = true;\n        }\n      } else if (!visitedBackward.has(hash)) {\n        visitedBackward.add(hash);\n        enqueue = true;\n      }\n\n      if (enqueue) {\n        const neighbourNode = {\n          node: {\n            pos: neighbour,\n            prev: node,\n          },\n          direction,\n        };\n\n        nodeHistory.push(neighbourNode);\n        queue.enqueue(neighbourNode);\n      }\n    }\n  }\n};\n\nconst rewind = (node: SearchNode): Vec2d[] => {\n  const intersection = nodeHistory\n    .filter(({ node: n }) => node.pos.equals(n.pos))\n    .sort(({ direction }) => (direction === Direction.Forward ? -1 : 1));\n\n  return [...defaultRewind(intersection[0].node), ...defaultRewind(intersection[1].node).reverse()];\n};\n\nconst biDirBfs = { name: \"Bidirectional BFS\", start, rewind };\n\nexport default biDirBfs;\n","export default class Vec2d {\n  constructor(readonly x: number, readonly y: number) {}\n\n  public add(v: Vec2d): Vec2d {\n    return new Vec2d(this.x + v.x, this.y + v.y);\n  }\n\n  public equals(v: Vec2d): boolean {\n    return this.x === v.x && this.y === v.y;\n  }\n\n  public toString(): string {\n    return `(${this.x}, ${this.y})`;\n  }\n\n  public static origin(): Vec2d {\n    return new Vec2d(0, 0);\n  }\n\n  public static random(from: Vec2d, to: Vec2d): Vec2d {\n    return new Vec2d(\n      Math.floor(from.x + Math.random() * (to.x - from.x)),\n      Math.floor(from.y + Math.random() * (to.y - from.y))\n    );\n  }\n}\n","import Maze from \"./Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nexport const getNeighbours = (maze: Maze, pos: Vec2d): Vec2d[] => {\n  const neighbours = [];\n\n  const dirs = [\n    { dx: 1, dy: 0 },\n    { dx: 0, dy: 1 },\n    { dx: -1, dy: 0 },\n    { dx: 0, dy: -1 },\n  ];\n\n  for (const { dx, dy } of dirs) {\n    const neighbour = pos.add(new Vec2d(dx, dy));\n\n    if (maze.isWithinBounds(neighbour) && !maze.isWall(neighbour)) {\n      neighbours.push(neighbour);\n    }\n  }\n\n  return neighbours;\n};\n\nexport const findEmptySquareInBounds = (maze: Maze, from: Vec2d, to: Vec2d): Vec2d => {\n  let square;\n\n  do square = Vec2d.random(from, to);\n  while (maze.isWall(square));\n\n  return square;\n};\n","import Vec2d from \"../utils/Vec2d\";\n\nexport default class Maze {\n  private walls = new Set<string>();\n\n  public constructor(readonly numCols: number, readonly numRows: number) {}\n\n  public toggleWall(pos: Vec2d): Maze {\n    if (!this.isWithinBounds(pos)) {\n      throw new Error(`Out of bounds: ${pos.toString()}`);\n    }\n\n    const maze = new Maze(this.numCols, this.numRows);\n    maze.walls = new Set([...this.walls]);\n\n    if (maze.isWall(pos)) {\n      maze.walls.delete(pos.toString());\n    } else {\n      maze.walls.add(pos.toString());\n    }\n\n    return maze;\n  }\n\n  public isWall(pos: Vec2d): boolean {\n    return this.walls.has(pos.toString());\n  }\n\n  public isWithinBounds(pos: Vec2d): boolean {\n    return pos.x >= 0 && pos.y >= 0 && pos.x < this.numCols && pos.y < this.numRows;\n  }\n}\n","import Maze from \"../Maze\";\nimport random from \"./random\";\n\ntype MazeGenerator = {\n  name: string;\n  generate: (cols: number, rows: number) => Maze;\n};\n\nconst generators: { [key: string]: MazeGenerator } = { random };\n\nexport default generators;\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst generate = (cols: number, rows: number): Maze => {\n  let maze = new Maze(cols, rows);\n\n  for (let row = 0; row < rows; ++row) {\n    for (let col = 0; col < cols; ++col) {\n      if (Math.random() < 0.25) {\n        maze = maze.toggleWall(new Vec2d(col, row));\n      }\n    }\n  }\n\n  return maze;\n};\n\nconst random = { name: \"Random\", generate };\n\nexport default random;\n","import Maze from \"../maze/Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nexport type SearchParams = {\n  maze: Maze;\n  start: Vec2d;\n  target: Vec2d;\n};\n\nexport type SearchNode = {\n  pos: Vec2d;\n  prev?: SearchNode;\n};\n\nexport type SearchState = {\n  current: SearchNode;\n  visited: Set<string>;\n  found: boolean;\n};\n\nexport const rewind = (node: SearchNode): Vec2d[] => {\n  const path = [];\n\n  while (node.prev) {\n    path.unshift(node.pos);\n    node = node.prev;\n  }\n\n  return path;\n};\n","export default class Queue<T> {\n  constructor(private items: T[] = []) {}\n\n  public enqueue(...items: T[]): void {\n    this.items.push(...items);\n  }\n\n  public dequeue(): T {\n    if (this.isEmpty()) {\n      throw new Error(\"Cannot dequeue empty queue\");\n    }\n\n    return this.items.shift() as T;\n  }\n\n  public isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  public get size(): number {\n    return this.items.length;\n  }\n}\n","import { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getNeighbours } from \"../../maze\";\nimport Queue from \"./utils/Queue\";\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n  const queue = new Queue<SearchNode>([{ pos: start }]);\n\n  while (!queue.isEmpty()) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of getNeighbours(maze, node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.enqueue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst bfs = { name: \"Breadth-first search\", start, rewind };\n\nexport default bfs;\n","import React, { useRef, useState } from \"react\";\nimport { findEmptySquareInBounds } from \"../maze\";\nimport Maze from \"../maze/Maze\";\nimport mazeGenerators from \"../maze/generators\";\nimport searchMethods from \"../search/methods\";\nimport Vec2d from \"../utils/Vec2d\";\nimport sleep from \"./utils/sleep\";\nimport Controls from \"./Controls\";\nimport MazeComponent from \"./Maze\";\n\ntype PathFinderProps = {\n  mazeSize: {\n    cols: number;\n    rows: number;\n  };\n  mazeStyle: React.CSSProperties;\n};\n\nenum MovingState {\n  None,\n  Start,\n  Target,\n}\n\nconst getInitialMaze = (cols: number, rows: number) => new Maze(cols, rows);\nconst getInitialStart = (cols: number, rows: number) => new Vec2d(Math.floor(cols / 4) - 1, Math.floor(rows / 2) - 1);\nconst getInitialTarget = (cols: number, rows: number) => new Vec2d(cols - Math.floor(cols / 4), Math.floor(rows / 2) - 1);\nconst getInitialVisited = () => new Set<string>();\nconst getInitialSolution = () => new Set<string>();\n\nconst PathFinder = ({ mazeSize: { cols, rows }, mazeStyle }: PathFinderProps): JSX.Element => {\n  const [maze, setMaze] = useState(getInitialMaze(cols, rows));\n  const [start, setStart] = useState(getInitialStart(cols, rows));\n  const [target, setTarget] = useState(getInitialTarget(cols, rows));\n  const [visited, setVisited] = useState(getInitialVisited());\n  const [solution, setSolution] = useState(getInitialSolution());\n\n  const [searchMethod, setSearchMethod] = useState(\"breadthFirstSearch\");\n  const [moving, setMoving] = useState(MovingState.None);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [, setStopTime] = useState(Date.now);\n\n  const search = useRef<Generator | null>(null);\n\n  const running = useRef(false);\n  const isRunning = (): boolean => running.current;\n  const setRunning = (r: boolean): void => {\n    running.current = r;\n    if (!r) setStopTime(Date.now);\n  };\n\n  const handleMouseUp = (): void => {\n    setMoving(MovingState.None);\n    setIsDrawing(false);\n  };\n\n  const handleMouseDown = (pos: Vec2d): void => {\n    if (isRunning()) {\n      return;\n    }\n\n    if (pos.equals(start)) {\n      return setMoving(MovingState.Start);\n    }\n\n    if (pos.equals(target)) {\n      return setMoving(MovingState.Target);\n    }\n\n    setIsDrawing(true);\n    setMaze(maze.toggleWall(pos));\n  };\n\n  const handleMouseEnter = (pos: Vec2d): void => {\n    if (moving !== MovingState.None && !maze.isWall(pos)) {\n      return moving === MovingState.Start ? setStart(pos) : setTarget(pos);\n    }\n\n    if (isDrawing && !pos.equals(start) && !pos.equals(target)) {\n      setMaze(maze.toggleWall(pos));\n    }\n  };\n\n  const handleStartClick = async (): Promise<void> => {\n    setRunning(true);\n\n    if (!search.current) {\n      search.current = generateSearch();\n      setSolution(getInitialSolution());\n    }\n\n    let next;\n\n    do {\n      next = search.current.next();\n      if (next.value) next.value();\n      if (!isRunning()) return;\n      await sleep(8);\n    } while (!next.done);\n\n    search.current = null;\n    setRunning(false);\n  };\n\n  const generateSearch = function* (): Generator<() => void> {\n    const method = searchMethods[searchMethod];\n\n    for (const state of method.start({ maze, start, target })) {\n      yield () => setVisited(new Set([...state.visited]));\n\n      if (state.found) {\n        const solution = getInitialSolution();\n        setSolution(solution);\n\n        for (const pos of method.rewind(state.current)) {\n          yield () => setSolution(new Set([...solution.add(pos.toString())]));\n        }\n\n        return;\n      }\n    }\n  };\n\n  const handleStopClick = (): void => {\n    setRunning(false);\n  };\n\n  const handleClearClick = (): void => {\n    setMaze(getInitialMaze(cols, rows));\n    setStart(getInitialStart(cols, rows));\n    setTarget(getInitialTarget(cols, rows));\n    setVisited(getInitialVisited());\n    setSolution(getInitialSolution());\n    setRunning(false);\n    search.current = null;\n  };\n\n  const handleGenerateClick = (): void => {\n    handleClearClick();\n\n    const maze = mazeGenerators[\"random\"].generate(cols, rows);\n    const start = findEmptySquareInBounds(maze, Vec2d.origin(), new Vec2d(cols / 3, rows));\n    const target = findEmptySquareInBounds(maze, new Vec2d((cols * 2) / 3, 0), new Vec2d(cols, rows));\n\n    setMaze(maze);\n    setStart(start);\n    setTarget(target);\n  };\n\n  const handleSearchMethodSelect = (e: any): void => {\n    setSearchMethod(e.target.value);\n  };\n\n  const getSquareClassName = (pos: Vec2d): string => {\n    if (maze.isWall(pos)) {\n      return \"is-wall\";\n    }\n\n    if (start.equals(pos)) {\n      return \"is-start\";\n    }\n\n    if (target.equals(pos)) {\n      return \"is-target\";\n    }\n\n    if (solution.has(pos.toString())) {\n      return \"is-solution\";\n    }\n\n    if (visited.has(pos.toString())) {\n      return \"is-visited\";\n    }\n\n    return \"\";\n  };\n\n  return (\n    <div className={`PathFinder${isRunning() ? \" is-running\" : \"\"}`}>\n      <Controls\n        isRunning={isRunning()}\n        onStartClick={handleStartClick}\n        onStopClick={handleStopClick}\n        onClearClick={handleClearClick}\n        onGenerateClick={handleGenerateClick}\n        onSearchMethodSelect={handleSearchMethodSelect}\n        selectedSearchMethod={searchMethod}\n      />\n      <MazeComponent\n        numRows={rows}\n        numCols={cols}\n        style={mazeStyle}\n        getSquareClassName={getSquareClassName}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default PathFinder;\n","import PriorityQueue from \"ts-priority-queue\";\nimport { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getNeighbours } from \"../../maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst manhattanDistance = (a: Vec2d, b: Vec2d): number => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n\n  const queue = new PriorityQueue<SearchNode>({\n    comparator: (a, b) => manhattanDistance(a.pos, target) - manhattanDistance(b.pos, target),\n    initialValues: [{ pos: start }],\n  });\n\n  while (queue.length > 0) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of getNeighbours(maze, node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.queue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst greedyBestFirstSearch = { name: \"Greedy best-first search\", start, rewind };\n\nexport default greedyBestFirstSearch;\n","import { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getNeighbours } from \"../../maze\";\n\nconst dfs = function* (node: SearchNode, visited: Set<string>, params: SearchParams): Generator<SearchState> {\n  yield { current: node, visited, found: node.pos.equals(params.target) };\n\n  for (const neighbour of getNeighbours(params.maze, node.pos)) {\n    const hash = neighbour.toString();\n\n    if (!visited.has(hash)) {\n      visited.add(hash);\n      yield* dfs({ pos: neighbour, prev: node }, visited, params);\n    }\n  }\n};\n\nconst start = function* (params: SearchParams): Generator<SearchState> {\n  yield* dfs({ pos: params.start }, new Set([params.start.toString()]), params);\n};\n\nconst depthFirstSearch = { name: \"Depth-first search\", start, rewind };\n\nexport default depthFirstSearch;\n","import { SearchNode, SearchParams, SearchState } from \"../\";\nimport breadthFirstSearch from \"./breadth-first-search\";\nimport biDirectionalBfs from \"./bidirectional-bfs\";\nimport greedBestFirstSearch from \"./greedy-best-first-search\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport Vec2d from \"../../utils/Vec2d\";\n\ntype SearchMethod = {\n  name: string;\n  start: (params: SearchParams) => Generator<SearchState>;\n  rewind: (node: SearchNode) => Vec2d[];\n};\n\nconst methods: { [key: string]: SearchMethod } = {\n  breadthFirstSearch,\n  biDirectionalBfs,\n  greedBestFirstSearch,\n  depthFirstSearch,\n};\n\nexport default methods;\n","const sleep = async (ms: number): Promise<void> => {\n  await new Promise((r) => setTimeout(r, ms));\n};\n\nexport default sleep;\n","import { FormEvent } from \"react\";\nimport methods from \"../search/methods\";\n\ntype ControlsProps = {\n  isRunning: boolean;\n  onStartClick: () => void;\n  onStopClick: () => void;\n  onClearClick: () => void;\n  onGenerateClick: () => void;\n  onSearchMethodSelect: (e: FormEvent<HTMLSelectElement>) => void;\n  selectedSearchMethod: string;\n};\n\nconst Controls = (props: ControlsProps): JSX.Element => (\n  <div className=\"Controls\">\n    <button onClick={props.isRunning ? props.onStopClick : props.onStartClick}>\n      {props.isRunning ? \"Stop\" : \"Start\"}\n    </button>\n    <button onClick={props.onClearClick} disabled={props.isRunning}>\n      Clear\n    </button>\n    <button onClick={props.onGenerateClick} disabled={props.isRunning}>\n      Generate\n    </button>\n    <select onChange={props.onSearchMethodSelect} value={props.selectedSearchMethod}>\n      {Object.entries(methods).map(([key, method]) => (\n        <option key={key} value={key}>\n          {method.name}\n        </option>\n      ))}\n    </select>\n  </div>\n);\n\nexport default Controls;\n","import React from \"react\";\nimport Vec2d from \"../utils/Vec2d\";\n\ntype MazeProps = {\n  numRows: number;\n  numCols: number;\n  style: React.CSSProperties;\n  getSquareClassName: (pos: Vec2d) => string;\n  onMouseUp: (pos: Vec2d) => void;\n  onMouseDown: (pos: Vec2d) => void;\n  onMouseEnter: (pos: Vec2d) => void;\n};\n\nconst Maze = (props: MazeProps): JSX.Element => {\n  const squares = [];\n\n  for (let row = 0; row < props.numRows; ++row) {\n    for (let col = 0; col < props.numCols; ++col) {\n      const pos = new Vec2d(col, row);\n\n      squares.push(\n        <div\n          key={pos.toString()}\n          className={props.getSquareClassName(pos)}\n          onMouseUp={() => props.onMouseUp(pos)}\n          onMouseDown={() => props.onMouseDown(pos)}\n          onMouseEnter={() => props.onMouseEnter(pos)}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"Maze\" style={props.style}>\n      {squares}\n    </div>\n  );\n};\n\nexport default Maze;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PathFinder from \"./Components/PathFinder\";\nimport \"./index.css\";\n\nconst buildPathFinderProps = () => {\n  // @ts-ignore\n  const bodyPadding = parseInt(getComputedStyle(document.body).getPropertyValue(\"padding-left\"));\n  // @ts-ignore\n  const headerHeight = parseInt(getComputedStyle(document.querySelector(\"header\")).getPropertyValue(\"height\"));\n  const squareWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue(\"--square-width\"));\n\n  const cols = Math.floor((window.innerWidth - 2 * bodyPadding) / squareWidth);\n  const rows = Math.floor((window.innerHeight - 2 * headerHeight - bodyPadding) / squareWidth);\n\n  return {\n    mazeSize: { cols, rows },\n    mazeStyle: {\n      gridTemplateColumns: `repeat(${cols}, ${squareWidth}px)`,\n      gridTemplateRows: `repeat(${rows}, ${squareWidth}px)`,\n    },\n  };\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathFinder {...buildPathFinderProps()} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}