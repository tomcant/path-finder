{"version":3,"sources":["maze/generators/depth-first-search.ts","search/methods/bidirectional-bfs.ts","utils/Vec2d.ts","maze/index.ts","maze/Maze.ts","maze/generators/prims.ts","maze/generators/binary-tree.ts","maze/generators/index.ts","maze/generators/random.ts","search/index.ts","search/methods/utils/Queue.ts","search/methods/breadth-first-search.ts","Components/PathFinder.tsx","search/methods/greedy-best-first-search.ts","search/methods/depth-first-search.ts","search/methods/index.ts","Components/utils/sleep.ts","Components/Controls.tsx","Components/Maze.tsx","index.tsx"],"names":["maze","Direction","nodeHistory","Vec2d","x","y","v","this","from","to","Math","floor","random","DIRECTIONS","dx","dy","getAdjacentMazePositions","pos","dist","map","add","getAdjacentPositions","filter","isWithinBounds","getAdjacentWallPositions","isWall","getAdjacentPathPositions","findEmptySquareInBounds","square","Maze","numCols","numRows","walls","Set","toggleWalls","positions","empty","Error","toString","delete","has","row","col","push","generate","cols","rows","full","frontier","origin","some","cell","randomElement","toggleWall","adjPath","length","randomPath","elements","prims","name","binaryTree","wallLeftOrUp","dfs","visited","shuffle","neighbour","hash","f","arr","currentIndex","randomIndex","generators","depthFirstSearch","start","rewind","node","path","prev","unshift","Queue","items","isEmpty","shift","size","breadthFirstSearch","target","queue","dequeue","current","found","equals","enqueue","MovingState","biDirBfs","visitedForward","visitedBackward","direction","Forward","Backward","neighbourNode","intersection","n","sort","defaultRewind","reverse","manhattanDistance","a","b","abs","greedyBestFirstSearch","PriorityQueue","comparator","initialValues","params","methods","biDirectionalBfs","greedBestFirstSearch","sleep","ms","Promise","r","setTimeout","Controls","props","className","onChange","onMazeGeneratorSelect","value","selectedMazeGenerator","Object","entries","mazeGenerators","key","generator","onClick","onGenerateClick","disabled","isSearching","isGenerating","onClearClick","onSearchMethodSelect","selectedSearchMethod","searchMethods","method","onStopClick","onStartClick","squares","getSquareClassName","onMouseUp","onMouseDown","onMouseEnter","style","getInitialMaze","getInitialStart","getInitialTarget","getInitialVisited","getInitialSolution","PathFinder","mazeSize","mazeStyle","useState","setMaze","setStart","setTarget","setVisited","solution","setSolution","Date","now","setFinishedAt","None","moving","setMoving","isDrawing","setIsDrawing","setIsGenerating","mazeGenerator","setMazeGenerator","searchMethod","setSearchMethod","currentSearch","useRef","setCurrentSearch","s","_isSearching","setIsSearching","handleStartClick","generateSearch","next","done","state","handleClearClick","handleGenerateClick","outOfBounds","finalMaze","e","Start","Target","ReactDOM","render","StrictMode","bodyPadding","parseInt","getComputedStyle","document","body","getPropertyValue","headerHeight","querySelector","squareWidth","documentElement","window","innerWidth","max","innerHeight","gridTemplateColumns","gridTemplateRows","buildPathFinderProps","getElementById"],"mappings":"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","file":"static/js/main.3b2a4d6b.chunk.js","sourcesContent":["import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\nimport { getAdjacentWallPositions } from \"../\";\n\nlet maze: Maze;\n\nconst dfs = function* (pos: Vec2d, visited: Set<string>): Generator<Maze> {\n  for (const neighbour of shuffle(getAdjacentWallPositions(maze, pos, 2))) {\n    const hash = neighbour.toString();\n\n    if (!visited.has(hash)) {\n      yield (maze = maze.toggleWalls([neighbour, new Vec2d((pos.x + neighbour.x) / 2, (pos.y + neighbour.y) / 2)]));\n      yield* dfs(neighbour, visited.add(hash));\n    }\n  }\n};\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  const start = Vec2d.random(Vec2d.origin(), new Vec2d(cols, rows));\n  maze = Maze.full(cols, rows).toggleWall(start);\n\n  yield* dfs(start, new Set([start.toString()]));\n};\n\nconst shuffle = <T>(arr: T[]) => {\n  let currentIndex = arr.length;\n\n  while (currentIndex > 0) {\n    const randomIndex = Math.floor(Math.random() * currentIndex--);\n    [arr[currentIndex], arr[randomIndex]] = [arr[randomIndex], arr[currentIndex]];\n  }\n\n  return arr;\n};\n\nconst depthFirstSearch = { name: \"Depth-first search\", generate };\n\nexport default depthFirstSearch;\n","import { SearchNode, SearchParams, SearchState, rewind as defaultRewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Queue from \"./utils/Queue\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nenum Direction {\n  Forward,\n  Backward,\n}\n\ntype BiDirSearchNode = {\n  node: SearchNode;\n  direction: Direction;\n};\n\nlet nodeHistory: BiDirSearchNode[];\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  nodeHistory = [];\n\n  const visitedForward = new Set<string>([start.toString()]);\n  const visitedBackward = new Set<string>([target.toString()]);\n\n  const queue = new Queue<BiDirSearchNode>([\n    {\n      node: { pos: start },\n      direction: Direction.Forward,\n    },\n    {\n      node: { pos: target },\n      direction: Direction.Backward,\n    },\n  ]);\n\n  while (!queue.isEmpty()) {\n    const { node, direction } = queue.dequeue();\n\n    const found =\n      (direction === Direction.Forward && visitedBackward.has(node.pos.toString())) ||\n      (direction === Direction.Backward && visitedForward.has(node.pos.toString()));\n\n    yield { current: node, visited: new Set([...visitedForward, ...visitedBackward]), found };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      const hash = neighbour.toString();\n      let enqueue = false;\n\n      if (direction === Direction.Forward) {\n        if (!visitedForward.has(hash)) {\n          visitedForward.add(hash);\n          enqueue = true;\n        }\n      } else if (!visitedBackward.has(hash)) {\n        visitedBackward.add(hash);\n        enqueue = true;\n      }\n\n      if (enqueue) {\n        const neighbourNode = {\n          node: {\n            pos: neighbour,\n            prev: node,\n          },\n          direction,\n        };\n\n        nodeHistory.push(neighbourNode);\n        queue.enqueue(neighbourNode);\n      }\n    }\n  }\n};\n\nconst rewind = (node: SearchNode): Vec2d[] => {\n  const intersection = nodeHistory\n    .filter(({ node: n }) => node.pos.equals(n.pos))\n    .sort(({ direction }) => (direction === Direction.Forward ? -1 : 1));\n\n  return [...defaultRewind(intersection[0].node), ...defaultRewind(intersection[1].node).reverse()];\n};\n\nconst biDirBfs = { name: \"Bidirectional BFS\", start, rewind };\n\nexport default biDirBfs;\n","export default class Vec2d {\n  constructor(readonly x: number, readonly y: number) {}\n\n  public add(v: Vec2d): Vec2d {\n    return new Vec2d(this.x + v.x, this.y + v.y);\n  }\n\n  public equals(v: Vec2d): boolean {\n    return this.x === v.x && this.y === v.y;\n  }\n\n  public toString(): string {\n    return `(${this.x}, ${this.y})`;\n  }\n\n  public static origin(): Vec2d {\n    return new Vec2d(0, 0);\n  }\n\n  public static random(from: Vec2d, to: Vec2d): Vec2d {\n    return new Vec2d(\n      Math.floor(from.x + Math.random() * (to.x - from.x)),\n      Math.floor(from.y + Math.random() * (to.y - from.y))\n    );\n  }\n}\n","import Maze from \"./Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nconst DIRECTIONS = [\n  { dx: 1, dy: 0 },\n  { dx: 0, dy: 1 },\n  { dx: -1, dy: 0 },\n  { dx: 0, dy: -1 },\n];\n\nconst getAdjacentPositions = (pos: Vec2d, dist: number): Vec2d[] =>\n  DIRECTIONS.map(({ dx, dy }) => pos.add(new Vec2d(dx * dist, dy * dist)));\n\nconst getAdjacentMazePositions = (maze: Maze, pos: Vec2d, dist: number): Vec2d[] =>\n  getAdjacentPositions(pos, dist).filter((pos) => maze.isWithinBounds(pos));\n\nexport const getAdjacentWallPositions = (maze: Maze, pos: Vec2d, dist: number = 1): Vec2d[] =>\n  getAdjacentMazePositions(maze, pos, dist).filter((pos) => maze.isWall(pos));\n\nexport const getAdjacentPathPositions = (maze: Maze, pos: Vec2d, dist: number = 1): Vec2d[] =>\n  getAdjacentMazePositions(maze, pos, dist).filter((pos) => !maze.isWall(pos));\n\nexport const findEmptySquareInBounds = (maze: Maze, from: Vec2d, to: Vec2d): Vec2d => {\n  let square;\n\n  do square = Vec2d.random(from, to);\n  while (maze.isWall(square));\n\n  return square;\n};\n","import Vec2d from \"../utils/Vec2d\";\n\nexport default class Maze {\n  private walls = new Set<string>();\n\n  private constructor(readonly numCols: number, readonly numRows: number) {}\n\n  public static empty(numCols: number, numRows: number): Maze {\n    return new Maze(numCols, numRows);\n  }\n\n  public static full(numCols: number, numRows: number): Maze {\n    const walls = [];\n\n    for (let row = 0; row < numRows; ++row) {\n      for (let col = 0; col < numCols; ++col) {\n        walls.push(new Vec2d(col, row));\n      }\n    }\n\n    return Maze.empty(numCols, numRows).toggleWalls(walls);\n  }\n\n  public toggleWall(pos: Vec2d): Maze {\n    return this.toggleWalls([pos]);\n  }\n\n  public toggleWalls(positions: Vec2d[]): Maze {\n    const maze = Maze.empty(this.numCols, this.numRows);\n    maze.walls = new Set([...this.walls]);\n\n    for (const pos of positions) {\n      if (!this.isWithinBounds(pos)) {\n        throw new Error(`Out of bounds: ${pos.toString()}`);\n      }\n\n      if (maze.isWall(pos)) {\n        maze.walls.delete(pos.toString());\n      } else {\n        maze.walls.add(pos.toString());\n      }\n    }\n\n    return maze;\n  }\n\n  public isWall(pos: Vec2d): boolean {\n    return this.walls.has(pos.toString());\n  }\n\n  public isWithinBounds(pos: Vec2d): boolean {\n    return pos.x >= 0 && pos.y >= 0 && pos.x < this.numCols && pos.y < this.numRows;\n  }\n}\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\nimport { getAdjacentWallPositions, getAdjacentPathPositions } from \"../\";\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  let maze = Maze.full(cols, rows);\n  const frontier = [Vec2d.random(Vec2d.origin(), new Vec2d(cols, rows))];\n\n  // eslint-disable-next-line no-loop-func\n  while (frontier.some((pos) => maze.isWall(pos))) {\n    // eslint-disable-next-line no-loop-func\n    const cell = randomElement(frontier.filter((pos) => maze.isWall(pos)));\n    maze = maze.toggleWall(cell);\n\n    const adjPath = getAdjacentPathPositions(maze, cell, 2);\n    if (adjPath.length > 0) {\n      const randomPath = randomElement(adjPath);\n      yield (maze = maze.toggleWall(new Vec2d((cell.x + randomPath.x) / 2, (cell.y + randomPath.y) / 2)));\n    }\n\n    frontier.push(...getAdjacentWallPositions(maze, cell, 2));\n  }\n};\n\nconst randomElement = <T>(elements: T[]): T => elements[Math.floor(Math.random() * elements.length)];\n\nconst prims = { name: \"Prims\", generate };\n\nexport default prims;\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  let maze = Maze.empty(cols, rows);\n\n  for (let row = 2; row < rows; row += 2) {\n    for (let col = 2; col < cols; col += 2) {\n      const wallLeftOrUp = [new Vec2d(col - 1, row), new Vec2d(col, row - 1)];\n      yield (maze = maze.toggleWalls([wallLeftOrUp[Math.floor(Math.random() * 2)], new Vec2d(col - 1, row - 1)]));\n    }\n  }\n};\n\nconst binaryTree = { name: \"Binary tree\", generate };\n\nexport default binaryTree;\n","import Maze from \"../Maze\";\nimport prims from \"./prims\";\nimport binaryTree from \"./binary-tree\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport random from \"./random\";\n\ntype MazeGenerator = {\n  name: string;\n  generate: (cols: number, rows: number) => Generator<Maze>;\n};\n\nconst generators: { [key: string]: MazeGenerator } = { prims, binaryTree, depthFirstSearch, random };\n\nexport default generators;\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst WALL_PROBABILITY = 1 / 4;\n\nconst generate = function* (cols: number, rows: number): Generator<Maze> {\n  let maze = Maze.empty(cols, rows);\n\n  for (let row = 0; row < rows; ++row) {\n    for (let col = 0; col < cols; ++col) {\n      if (Math.random() < WALL_PROBABILITY) {\n        yield (maze = maze.toggleWall(new Vec2d(col, row)));\n      }\n    }\n  }\n};\n\nconst random = { name: \"Random\", generate };\n\nexport default random;\n","import Maze from \"../maze/Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nexport type SearchParams = {\n  maze: Maze;\n  start: Vec2d;\n  target: Vec2d;\n};\n\nexport type SearchNode = {\n  pos: Vec2d;\n  prev?: SearchNode;\n};\n\nexport type SearchState = {\n  current: SearchNode;\n  visited: Set<string>;\n  found: boolean;\n};\n\nexport const rewind = (node: SearchNode): Vec2d[] => {\n  const path = [];\n\n  while (node.prev) {\n    path.unshift(node.pos);\n    node = node.prev;\n  }\n\n  return path;\n};\n","export default class Queue<T> {\n  constructor(private items: T[] = []) {}\n\n  public enqueue(...items: T[]): void {\n    this.items.push(...items);\n  }\n\n  public dequeue(): T {\n    if (this.isEmpty()) {\n      throw new Error(\"Cannot dequeue empty queue\");\n    }\n\n    return this.items.shift() as T;\n  }\n\n  public isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  public get size(): number {\n    return this.items.length;\n  }\n}\n","import { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Queue from \"./utils/Queue\";\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n  const queue = new Queue<SearchNode>([{ pos: start }]);\n\n  while (!queue.isEmpty()) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.enqueue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst breadthFirstSearch = { name: \"Breadth-first search\", start, rewind };\n\nexport default breadthFirstSearch;\n","import React, { useRef, useState } from \"react\";\nimport { findEmptySquareInBounds } from \"../maze\";\nimport Maze from \"../maze/Maze\";\nimport mazeGenerators from \"../maze/generators\";\nimport searchMethods from \"../search/methods\";\nimport Vec2d from \"../utils/Vec2d\";\nimport sleep from \"./utils/sleep\";\nimport Controls from \"./Controls\";\nimport MazeComponent from \"./Maze\";\n\ntype PathFinderProps = {\n  mazeSize: {\n    cols: number;\n    rows: number;\n  };\n  mazeStyle: React.CSSProperties;\n};\n\nenum MovingState {\n  None,\n  Start,\n  Target,\n}\n\nconst getInitialMaze = (cols: number, rows: number) => Maze.empty(cols, rows);\nconst getInitialStart = (cols: number, rows: number) => new Vec2d(Math.floor(cols / 4) - 1, Math.floor(rows / 2));\nconst getInitialTarget = (cols: number, rows: number) => new Vec2d(cols - Math.floor(cols / 4), Math.floor(rows / 2));\nconst getInitialVisited = () => new Set<string>();\nconst getInitialSolution = () => new Set<string>();\n\nconst PathFinder = ({ mazeSize: { cols, rows }, mazeStyle }: PathFinderProps): JSX.Element => {\n  const [maze, setMaze] = useState(getInitialMaze(cols, rows));\n  const [start, setStart] = useState(getInitialStart(cols, rows));\n  const [target, setTarget] = useState(getInitialTarget(cols, rows));\n  const [visited, setVisited] = useState(getInitialVisited());\n  const [solution, setSolution] = useState(getInitialSolution());\n\n  const [, setFinishedAt] = useState(Date.now);\n  const [moving, setMoving] = useState(MovingState.None);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const [mazeGenerator, setMazeGenerator] = useState(\"prims\");\n  const [searchMethod, setSearchMethod] = useState(\"breadthFirstSearch\");\n\n  const currentSearch = useRef<Generator | null>(null);\n  const hasCurrentSearch = (): boolean => currentSearch.current !== null;\n  const setCurrentSearch = (s: Generator | null): void => void (currentSearch.current = s);\n\n  const _isSearching = useRef(false);\n  const isSearching = (): boolean => _isSearching.current;\n  const setIsSearching = (r: boolean): void => void (_isSearching.current = r);\n\n  const handleMouseUp = (): void => {\n    setMoving(MovingState.None);\n    setIsDrawing(false);\n  };\n\n  const handleMouseDown = (pos: Vec2d): void => {\n    if (isSearching()) {\n      return;\n    }\n\n    if (pos.equals(start)) {\n      return setMoving(MovingState.Start);\n    }\n\n    if (pos.equals(target)) {\n      return setMoving(MovingState.Target);\n    }\n\n    setIsDrawing(true);\n    setMaze(maze.toggleWall(pos));\n  };\n\n  const handleMouseEnter = (pos: Vec2d): void => {\n    if (moving !== MovingState.None && !maze.isWall(pos)) {\n      return moving === MovingState.Start ? setStart(pos) : setTarget(pos);\n    }\n\n    if (isDrawing && !pos.equals(start) && !pos.equals(target)) {\n      setMaze(maze.toggleWall(pos));\n    }\n  };\n\n  const handleStartClick = async (): Promise<void> => {\n    setIsSearching(true);\n\n    if (!hasCurrentSearch()) {\n      setCurrentSearch(generateSearch());\n      setSolution(getInitialSolution());\n    }\n\n    let next;\n\n    do {\n      // @ts-ignore\n      next = currentSearch.current.next();\n      if (next.value) next.value();\n      if (!isSearching()) return;\n      await sleep(8);\n    } while (!next.done);\n\n    setCurrentSearch(null);\n    setIsSearching(false);\n    setFinishedAt(Date.now);\n  };\n\n  const generateSearch = function* (): Generator<() => void> {\n    const method = searchMethods[searchMethod];\n\n    for (const state of method.start({ maze, start, target })) {\n      yield () => setVisited(new Set([...state.visited]));\n\n      if (state.found) {\n        const solution = getInitialSolution();\n        setSolution(solution);\n\n        for (const pos of method.rewind(state.current)) {\n          yield () => setSolution(new Set([...solution.add(pos.toString())]));\n        }\n\n        return;\n      }\n    }\n  };\n\n  const handleStopClick = (): void => setIsSearching(false);\n\n  const handleClearClick = (): void => {\n    setMaze(getInitialMaze(cols, rows));\n    setStart(getInitialStart(cols, rows));\n    setTarget(getInitialTarget(cols, rows));\n    setVisited(getInitialVisited());\n    setSolution(getInitialSolution());\n    setCurrentSearch(null);\n    setIsGenerating(false);\n    setIsSearching(false);\n  };\n\n  const handleGenerateClick = async (): Promise<void> => {\n    handleClearClick();\n    setIsGenerating(true);\n\n    const outOfBounds = new Vec2d(cols, rows);\n    setStart(outOfBounds);\n    setTarget(outOfBounds);\n\n    let finalMaze = maze;\n\n    for (const maze of mazeGenerators[mazeGenerator].generate(cols, rows)) {\n      setMaze(maze);\n      finalMaze = maze;\n      await sleep(8);\n    }\n\n    setStart(findEmptySquareInBounds(finalMaze, Vec2d.origin(), new Vec2d(cols / 3, rows)));\n    setTarget(findEmptySquareInBounds(finalMaze, new Vec2d((cols * 2) / 3, 0), new Vec2d(cols, rows)));\n    setIsGenerating(false);\n  };\n\n  const handleMazeGeneratorSelect = (e: any): void => setMazeGenerator(e.target.value);\n  const handleSearchMethodSelect = (e: any): void => setSearchMethod(e.target.value);\n\n  const getSquareClassName = (pos: Vec2d): string => {\n    if (maze.isWall(pos)) {\n      return \"is-wall\";\n    }\n\n    if (start.equals(pos)) {\n      return \"is-start\";\n    }\n\n    if (target.equals(pos)) {\n      return \"is-target\";\n    }\n\n    if (solution.has(pos.toString())) {\n      return \"is-solution\";\n    }\n\n    if (visited.has(pos.toString())) {\n      return \"is-visited\";\n    }\n\n    return \"\";\n  };\n\n  return (\n    <div className={`PathFinder${isGenerating ? \" is-generating\" : isSearching() ? \" is-searching\" : \"\"}`}>\n      <Controls\n        isGenerating={isGenerating}\n        isSearching={isSearching()}\n        onStartClick={handleStartClick}\n        onStopClick={handleStopClick}\n        onClearClick={handleClearClick}\n        onGenerateClick={handleGenerateClick}\n        selectedMazeGenerator={mazeGenerator}\n        selectedSearchMethod={searchMethod}\n        onMazeGeneratorSelect={handleMazeGeneratorSelect}\n        onSearchMethodSelect={handleSearchMethodSelect}\n      />\n      <MazeComponent\n        numRows={rows}\n        numCols={cols}\n        style={mazeStyle}\n        getSquareClassName={getSquareClassName}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default PathFinder;\n","import PriorityQueue from \"ts-priority-queue\";\nimport { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst manhattanDistance = (a: Vec2d, b: Vec2d): number => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n\n  const queue = new PriorityQueue<SearchNode>({\n    comparator: (a, b) => manhattanDistance(a.pos, target) - manhattanDistance(b.pos, target),\n    initialValues: [{ pos: start }],\n  });\n\n  while (queue.length > 0) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.queue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst greedyBestFirstSearch = { name: \"Greedy best-first search\", start, rewind };\n\nexport default greedyBestFirstSearch;\n","import { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\n\nconst dfs = function* (node: SearchNode, visited: Set<string>, params: SearchParams): Generator<SearchState> {\n  yield { current: node, visited, found: node.pos.equals(params.target) };\n\n  for (const neighbour of getAdjacentPathPositions(params.maze, node.pos)) {\n    const hash = neighbour.toString();\n\n    if (!visited.has(hash)) {\n      visited.add(hash);\n      yield* dfs({ pos: neighbour, prev: node }, visited, params);\n    }\n  }\n};\n\nconst start = function* (params: SearchParams): Generator<SearchState> {\n  yield* dfs({ pos: params.start }, new Set([params.start.toString()]), params);\n};\n\nconst depthFirstSearch = { name: \"Depth-first search\", start, rewind };\n\nexport default depthFirstSearch;\n","import { SearchNode, SearchParams, SearchState } from \"../\";\nimport breadthFirstSearch from \"./breadth-first-search\";\nimport biDirectionalBfs from \"./bidirectional-bfs\";\nimport greedBestFirstSearch from \"./greedy-best-first-search\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport Vec2d from \"../../utils/Vec2d\";\n\ntype SearchMethod = {\n  name: string;\n  start: (params: SearchParams) => Generator<SearchState>;\n  rewind: (node: SearchNode) => Vec2d[];\n};\n\nconst methods: { [key: string]: SearchMethod } = {\n  breadthFirstSearch,\n  biDirectionalBfs,\n  greedBestFirstSearch,\n  depthFirstSearch,\n};\n\nexport default methods;\n","const sleep = async (ms: number): Promise<void> => {\n  await new Promise((r) => setTimeout(r, ms));\n};\n\nexport default sleep;\n","import { FormEvent } from \"react\";\nimport mazeGenerators from \"../maze/generators\";\nimport searchMethods from \"../search/methods\";\n\ntype ControlsProps = {\n  isGenerating: boolean;\n  isSearching: boolean;\n  onStartClick: () => void;\n  onStopClick: () => void;\n  onClearClick: () => void;\n  onGenerateClick: () => void;\n  selectedMazeGenerator: string;\n  selectedSearchMethod: string;\n  onMazeGeneratorSelect: (e: FormEvent<HTMLSelectElement>) => void;\n  onSearchMethodSelect: (e: FormEvent<HTMLSelectElement>) => void;\n};\n\nconst Controls = (props: ControlsProps): JSX.Element => (\n  <div className=\"Controls\">\n    <fieldset>\n      <legend>Maze generator</legend>\n      <select onChange={props.onMazeGeneratorSelect} value={props.selectedMazeGenerator}>\n        {Object.entries(mazeGenerators).map(([key, generator]) => (\n          <option key={key} value={key}>\n            {generator.name}\n          </option>\n        ))}\n      </select>\n      <button onClick={props.onGenerateClick} disabled={props.isSearching || props.isGenerating}>\n        Generate\n      </button>\n      <button onClick={props.onClearClick} disabled={props.isSearching || props.isGenerating}>\n        Clear\n      </button>\n    </fieldset>\n    <fieldset>\n      <legend>Search method</legend>\n      <select onChange={props.onSearchMethodSelect} value={props.selectedSearchMethod}>\n        {Object.entries(searchMethods).map(([key, method]) => (\n          <option key={key} value={key}>\n            {method.name}\n          </option>\n        ))}\n      </select>\n      <button onClick={props.isSearching ? props.onStopClick : props.onStartClick} disabled={props.isGenerating}>\n        {props.isSearching ? \"Stop\" : \"Start\"}\n      </button>\n    </fieldset>\n  </div>\n);\n\nexport default Controls;\n","import React from \"react\";\nimport Vec2d from \"../utils/Vec2d\";\n\ntype MazeProps = {\n  numRows: number;\n  numCols: number;\n  style: React.CSSProperties;\n  getSquareClassName: (pos: Vec2d) => string;\n  onMouseUp: (pos: Vec2d) => void;\n  onMouseDown: (pos: Vec2d) => void;\n  onMouseEnter: (pos: Vec2d) => void;\n};\n\nconst Maze = (props: MazeProps): JSX.Element => {\n  const squares = [];\n\n  for (let row = 0; row < props.numRows; ++row) {\n    for (let col = 0; col < props.numCols; ++col) {\n      const pos = new Vec2d(col, row);\n\n      squares.push(\n        <div\n          key={pos.toString()}\n          className={props.getSquareClassName(pos)}\n          onMouseUp={() => props.onMouseUp(pos)}\n          onMouseDown={() => props.onMouseDown(pos)}\n          onMouseEnter={() => props.onMouseEnter(pos)}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"Maze\" style={props.style}>\n      {squares}\n    </div>\n  );\n};\n\nexport default Maze;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PathFinder from \"./Components/PathFinder\";\nimport \"./index.css\";\n\nconst buildPathFinderProps = () => {\n  // @ts-ignore\n  const bodyPadding = parseInt(getComputedStyle(document.body).getPropertyValue(\"padding-left\"));\n  // @ts-ignore\n  const headerHeight = parseInt(getComputedStyle(document.querySelector(\"header\")).getPropertyValue(\"height\"));\n  const squareWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue(\"--square-width\"));\n\n  const cols = Math.floor((window.innerWidth - 2 * bodyPadding) / squareWidth);\n  const rows = Math.max(5, Math.floor((window.innerHeight - 3 * headerHeight) / squareWidth));\n\n  return {\n    mazeSize: { cols, rows },\n    mazeStyle: {\n      gridTemplateColumns: `repeat(${cols}, ${squareWidth}px)`,\n      gridTemplateRows: `repeat(${rows}, ${squareWidth}px)`,\n    },\n  };\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathFinder {...buildPathFinderProps()} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}