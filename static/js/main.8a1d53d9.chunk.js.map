{"version":3,"sources":["search/methods/bidirectional-bfs.ts","utils/Vec2d.ts","maze/Maze.ts","maze/generators/random.ts","search/index.ts","search/methods/utils/Queue.ts","search/methods/breadth-first-search.ts","Components/PathFinder.tsx","search/methods/greedy-best-first-search.ts","search/methods/depth-first-search.ts","search/methods/index.ts","Components/utils/sleep.ts","Components/Controls.tsx","Components/Maze.tsx","index.tsx"],"names":["Direction","nodeHistory","Vec2d","x","y","v","this","minX","minY","maxX","maxY","Math","floor","random","Maze","numCols","numRows","walls","Set","pos","isWithinBounds","Error","toString","maze","isWall","delete","add","has","neighbours","dx","dy","neighbour","push","cols","rows","start","target","row","col","equals","toggleWall","rewind","node","path","prev","unshift","Queue","items","isEmpty","shift","size","length","bfs","name","visited","queue","dequeue","current","found","getNeighbours","hash","enqueue","f","MovingState","biDirBfs","visitedForward","visitedBackward","direction","Forward","Backward","neighbourNode","intersection","filter","n","sort","defaultRewind","reverse","manhattanDistance","a","b","abs","greedyBestFirstSearch","PriorityQueue","comparator","initialValues","dfs","params","methods","breadthFirstSearch","biDirectionalBfs","greedBestFirstSearch","sleep","ms","Promise","r","setTimeout","Controls","props","className","onClick","isRunning","onStopClick","onStartClick","onClearClick","disabled","onGenerateClick","onChange","onMethodSelect","value","selectedSearchMethod","Object","entries","map","key","method","squares","getSquareClassName","onMouseUp","onMouseDown","onMouseEnter","style","getInitialMaze","getInitialStart","getInitialTarget","getInitialVisited","getInitialSolution","PathFinder","mazeSize","mazeStyle","useState","setMaze","setStart","setTarget","setVisited","solution","setSolution","searchMethod","setSearchMethod","None","moving","setMoving","isDrawing","setIsDrawing","Date","now","setStopTime","search","useRef","running","setRunning","handleStartClick","generateSearch","next","done","searchMethods","state","handleClearClick","generateMaze","e","Start","Target","ReactDOM","render","StrictMode","bodyPadding","parseInt","getComputedStyle","document","body","getPropertyValue","headerHeight","querySelector","squareWidth","documentElement","window","innerWidth","innerHeight","gridTemplateColumns","gridTemplateRows","buildPathFinderProps","getElementById"],"mappings":"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","file":"static/js/main.8a1d53d9.chunk.js","sourcesContent":["import { SearchMethod, SearchNode, SearchParams, SearchState, rewind as defaultRewind } from \"../\";\nimport Queue from \"./utils/Queue\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nenum Direction {\n  Forward,\n  Backward,\n}\n\ntype BiDirSearchNode = {\n  node: SearchNode;\n  direction: Direction;\n};\n\nlet nodeHistory: BiDirSearchNode[];\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  nodeHistory = [];\n\n  const visitedForward = new Set<string>([start.toString()]);\n  const visitedBackward = new Set<string>([target.toString()]);\n\n  const queue = new Queue<BiDirSearchNode>([\n    {\n      node: { pos: start },\n      direction: Direction.Forward,\n    },\n    {\n      node: { pos: target },\n      direction: Direction.Backward,\n    },\n  ]);\n\n  while (!queue.isEmpty()) {\n    const { node, direction } = queue.dequeue();\n\n    const found =\n      (direction === Direction.Forward && visitedBackward.has(node.pos.toString())) ||\n      (direction === Direction.Backward && visitedForward.has(node.pos.toString()));\n\n    yield { current: node, visited: new Set([...visitedForward, ...visitedBackward]), found };\n\n    for (const neighbour of maze.getNeighbours(node.pos)) {\n      const hash = neighbour.toString();\n      let enqueue = false;\n\n      if (direction === Direction.Forward) {\n        if (!visitedForward.has(hash)) {\n          visitedForward.add(hash);\n          enqueue = true;\n        }\n      } else if (!visitedBackward.has(hash)) {\n        visitedBackward.add(hash);\n        enqueue = true;\n      }\n\n      if (enqueue) {\n        const neighbourNode = {\n          node: {\n            pos: neighbour,\n            prev: node,\n          },\n          direction,\n        };\n\n        nodeHistory.push(neighbourNode);\n        queue.enqueue(neighbourNode);\n      }\n    }\n  }\n};\n\nconst rewind = (node: SearchNode): Vec2d[] => {\n  const intersection = nodeHistory\n    .filter(({ node: n }) => node.pos.equals(n.pos))\n    .sort(({ direction }) => (direction === Direction.Forward ? -1 : 1));\n\n  return [...defaultRewind(intersection[0].node), ...defaultRewind(intersection[1].node).reverse()];\n};\n\nconst biDirBfs: SearchMethod = { name: \"Bidirectional BFS\", start, rewind };\n\nexport default biDirBfs;\n","export default class Vec2d {\n  constructor(readonly x: number, readonly y: number) {}\n\n  public add(v: Vec2d): Vec2d {\n    return new Vec2d(this.x + v.x, this.y + v.y);\n  }\n\n  public equals(v: Vec2d): boolean {\n    return this.x === v.x && this.y === v.y;\n  }\n\n  public toString(): string {\n    return `(${this.x}, ${this.y})`;\n  }\n\n  public static random(minX: number, minY: number, maxX: number, maxY: number): Vec2d {\n    return new Vec2d(\n      Math.floor(minX + Math.random() * (maxX - minX)),\n      Math.floor(minY + Math.random() * (maxY - minY))\n    );\n  }\n}\n","import Vec2d from \"../utils/Vec2d\";\n\nexport default class Maze {\n  private walls = new Set<string>();\n\n  public constructor(readonly numCols: number, readonly numRows: number) {}\n\n  public toggleWall(pos: Vec2d): Maze {\n    if (!this.isWithinBounds(pos)) {\n      throw new Error(`Out of bounds: ${pos.toString()}`);\n    }\n\n    const maze = new Maze(this.numCols, this.numRows);\n    maze.walls = new Set([...this.walls]);\n\n    if (maze.isWall(pos)) {\n      maze.walls.delete(pos.toString());\n    } else {\n      maze.walls.add(pos.toString());\n    }\n\n    return maze;\n  }\n\n  public isWall(pos: Vec2d): boolean {\n    return this.walls.has(pos.toString());\n  }\n\n  public getNeighbours(pos: Vec2d): Vec2d[] {\n    const neighbours = [];\n\n    const dirs = [\n      { dx: 1, dy: 0 },\n      { dx: 0, dy: 1 },\n      { dx: -1, dy: 0 },\n      { dx: 0, dy: -1 },\n    ];\n\n    for (const { dx, dy } of dirs) {\n      const neighbour = pos.add(new Vec2d(dx, dy));\n\n      if (!this.isWithinBounds(neighbour)) {\n        continue;\n      }\n\n      if (!this.isWall(neighbour)) {\n        neighbours.push(neighbour);\n      }\n    }\n\n    return neighbours;\n  }\n\n  private isWithinBounds(pos: Vec2d): boolean {\n    return pos.x >= 0 && pos.y >= 0 && pos.x < this.numCols && pos.y < this.numRows;\n  }\n}\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst random = (cols: number, rows: number) => {\n  const start = Vec2d.random(0, 0, cols / 3, rows / 3);\n  const target = Vec2d.random((cols * 2) / 3, (rows * 2) / 3, cols, rows);\n\n  let maze = new Maze(cols, rows);\n\n  for (let row = 0; row < rows; ++row) {\n    for (let col = 0; col < cols; ++col) {\n      const pos = new Vec2d(col, row);\n\n      if (start.equals(pos) || target.equals(pos)) {\n        continue;\n      }\n\n      if (Math.random() < 0.25) {\n        maze = maze.toggleWall(pos);\n      }\n    }\n  }\n\n  return { maze, start, target };\n};\n\nexport default random;\n","import Maze from \"../maze/Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nexport type SearchParams = {\n  maze: Maze;\n  start: Vec2d;\n  target: Vec2d;\n};\n\nexport type SearchNode = {\n  pos: Vec2d;\n  prev?: SearchNode;\n};\n\nexport type SearchState = {\n  current: SearchNode;\n  visited: Set<string>;\n  found: boolean;\n};\n\nexport type SearchMethod = {\n  name: string;\n  start: (params: SearchParams) => Generator<SearchState>;\n  rewind: (node: SearchNode) => Vec2d[];\n};\n\nexport const rewind = (node: SearchNode): Vec2d[] => {\n  const path = [];\n\n  while (node.prev) {\n    path.unshift(node.pos);\n    node = node.prev;\n  }\n\n  return path;\n};\n","export default class Queue<T> {\n  constructor(private items: T[] = []) {}\n\n  public enqueue(...items: T[]): void {\n    this.items.push(...items);\n  }\n\n  public dequeue(): T {\n    if (this.isEmpty()) {\n      throw new Error(\"Cannot dequeue empty queue\");\n    }\n\n    return this.items.shift() as T;\n  }\n\n  public isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  public get size(): number {\n    return this.items.length;\n  }\n}\n","import { SearchMethod, SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport Queue from \"./utils/Queue\";\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n  const queue = new Queue<SearchNode>([{ pos: start }]);\n\n  while (!queue.isEmpty()) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of maze.getNeighbours(node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.enqueue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst bfs: SearchMethod = { name: \"Breadth-first search\", start, rewind };\n\nexport default bfs;\n","import React, { useRef, useState } from \"react\";\nimport Maze from \"../maze/Maze\";\nimport generateMaze from \"../maze/generators/random\";\nimport searchMethods from \"../search/methods\";\nimport Vec2d from \"../utils/Vec2d\";\nimport sleep from \"./utils/sleep\";\nimport Controls from \"./Controls\";\nimport MazeComponent from \"./Maze\";\n\ntype PathFinderProps = {\n  mazeSize: {\n    cols: number;\n    rows: number;\n  };\n  mazeStyle: React.CSSProperties;\n};\n\nenum MovingState {\n  None,\n  Start,\n  Target,\n}\n\nconst getInitialMaze = (cols: number, rows: number) => new Maze(cols, rows);\nconst getInitialStart = (cols: number, rows: number) => new Vec2d(Math.floor(cols / 4) - 1, Math.floor(rows / 2) - 1);\nconst getInitialTarget = (cols: number, rows: number) => new Vec2d(cols - Math.floor(cols / 4), Math.floor(rows / 2) - 1);\nconst getInitialVisited = () => new Set<string>();\nconst getInitialSolution = () => new Set<string>();\n\nconst PathFinder = ({ mazeSize: { cols, rows }, mazeStyle }: PathFinderProps): JSX.Element => {\n  const [maze, setMaze] = useState(getInitialMaze(cols, rows));\n  const [start, setStart] = useState(getInitialStart(cols, rows));\n  const [target, setTarget] = useState(getInitialTarget(cols, rows));\n  const [visited, setVisited] = useState(getInitialVisited());\n  const [solution, setSolution] = useState(getInitialSolution());\n\n  const [searchMethod, setSearchMethod] = useState(\"breadth-first-search\");\n  const [moving, setMoving] = useState(MovingState.None);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [, setStopTime] = useState(Date.now);\n\n  const search = useRef<Generator | null>(null);\n\n  const running = useRef(false);\n  const isRunning = (): boolean => running.current;\n  const setRunning = (r: boolean): void => {\n    running.current = r;\n    if (!r) setStopTime(Date.now);\n  };\n\n  const handleMouseUp = (): void => {\n    setMoving(MovingState.None);\n    setIsDrawing(false);\n  };\n\n  const handleMouseDown = (pos: Vec2d): void => {\n    if (isRunning()) {\n      return;\n    }\n\n    if (pos.equals(start)) {\n      return setMoving(MovingState.Start);\n    }\n\n    if (pos.equals(target)) {\n      return setMoving(MovingState.Target);\n    }\n\n    setIsDrawing(true);\n    setMaze(maze.toggleWall(pos));\n  };\n\n  const handleMouseEnter = (pos: Vec2d): void => {\n    if (moving !== MovingState.None && !maze.isWall(pos)) {\n      return moving === MovingState.Start ? setStart(pos) : setTarget(pos);\n    }\n\n    if (isDrawing && !pos.equals(start) && !pos.equals(target)) {\n      setMaze(maze.toggleWall(pos));\n    }\n  };\n\n  const handleStartClick = async (): Promise<void> => {\n    setRunning(true);\n\n    if (!search.current) {\n      search.current = generateSearch();\n      setSolution(getInitialSolution());\n    }\n\n    let next;\n\n    do {\n      next = search.current.next();\n      if (next.value) next.value();\n      if (!isRunning()) return;\n      await sleep(5);\n    } while (!next.done);\n\n    search.current = null;\n    setRunning(false);\n  };\n\n  const generateSearch = function* (): Generator<() => void> {\n    // @ts-ignore\n    const method = searchMethods[searchMethod];\n\n    for (const state of method.start({ maze, start, target })) {\n      yield () => setVisited(new Set([...state.visited]));\n\n      if (state.found) {\n        const solution = getInitialSolution();\n        setSolution(solution);\n\n        for (const pos of method.rewind(state.current)) {\n          yield () => setSolution(new Set([...solution.add(pos.toString())]));\n        }\n\n        return;\n      }\n    }\n  };\n\n  const handleStopClick = (): void => {\n    setRunning(false);\n  };\n\n  const handleClearClick = (): void => {\n    setMaze(getInitialMaze(cols, rows));\n    setStart(getInitialStart(cols, rows));\n    setTarget(getInitialTarget(cols, rows));\n    setVisited(getInitialVisited());\n    setSolution(getInitialSolution());\n    setRunning(false);\n    search.current = null;\n  };\n\n  const handleGenerateClick = (): void => {\n    handleClearClick();\n\n    const { maze, start, target } = generateMaze(cols, rows);\n\n    setMaze(maze);\n    setStart(start);\n    setTarget(target);\n  };\n\n  const handleMethodSelect = (e: any): void => {\n    setSearchMethod(e.target.value);\n  };\n\n  const getSquareClassName = (pos: Vec2d): string => {\n    if (maze.isWall(pos)) {\n      return \"is-wall\";\n    }\n\n    if (start.equals(pos)) {\n      return \"is-start\";\n    }\n\n    if (target.equals(pos)) {\n      return \"is-target\";\n    }\n\n    if (solution.has(pos.toString())) {\n      return \"is-solution\";\n    }\n\n    if (visited.has(pos.toString())) {\n      return \"is-visited\";\n    }\n\n    return \"\";\n  };\n\n  return (\n    <div className={`PathFinder${isRunning() ? \" is-running\" : \"\"}`}>\n      <Controls\n        isRunning={isRunning()}\n        onStartClick={handleStartClick}\n        onStopClick={handleStopClick}\n        onClearClick={handleClearClick}\n        onGenerateClick={handleGenerateClick}\n        onMethodSelect={handleMethodSelect}\n        selectedSearchMethod={searchMethod}\n      />\n      <MazeComponent\n        numRows={rows}\n        numCols={cols}\n        style={mazeStyle}\n        getSquareClassName={getSquareClassName}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default PathFinder;\n","import PriorityQueue from \"ts-priority-queue\";\nimport { SearchMethod, SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst manhattanDistance = (a: Vec2d, b: Vec2d): number => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n\n  const queue = new PriorityQueue<SearchNode>({\n    comparator: (a, b) => manhattanDistance(a.pos, target) - manhattanDistance(b.pos, target),\n    initialValues: [{ pos: start }],\n  });\n\n  while (queue.length > 0) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of maze.getNeighbours(node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.queue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst greedyBestFirstSearch: SearchMethod = { name: \"Greedy best-first search\", start, rewind };\n\nexport default greedyBestFirstSearch;\n","import { SearchMethod, SearchNode, SearchParams, SearchState, rewind } from \"../\";\n\nconst dfs = function* (node: SearchNode, visited: Set<string>, params: SearchParams): Generator<SearchState> {\n  yield { current: node, visited, found: node.pos.equals(params.target) };\n\n  for (const neighbour of params.maze.getNeighbours(node.pos)) {\n    const hash = neighbour.toString();\n\n    if (!visited.has(hash)) {\n      visited.add(hash);\n      yield* dfs({ pos: neighbour, prev: node }, visited, params);\n    }\n  }\n};\n\nconst start = function* (params: SearchParams): Generator<SearchState> {\n  yield* dfs({ pos: params.start }, new Set([params.start.toString()]), params);\n};\n\nconst depthFirstSearch: SearchMethod = { name: \"Depth-first search\", start, rewind };\n\nexport default depthFirstSearch;\n","import breadthFirstSearch from \"./breadth-first-search\";\nimport biDirectionalBfs from \"./bidirectional-bfs\";\nimport greedBestFirstSearch from \"./greedy-best-first-search\";\nimport depthFirstSearch from \"./depth-first-search\";\n\nconst methods = {\n  \"breadth-first-search\": breadthFirstSearch,\n  \"bidirectional-bfs\": biDirectionalBfs,\n  \"greedy-best-first-search\": greedBestFirstSearch,\n  \"depth-first-search\": depthFirstSearch,\n};\n\nexport default methods;\n","const sleep = async (ms: number): Promise<void> => {\n  await new Promise((r) => setTimeout(r, ms));\n};\n\nexport default sleep;\n","import { FormEvent } from \"react\";\nimport methods from \"../search/methods\";\n\ntype ControlsProps = {\n  isRunning: boolean;\n  onStartClick: () => void;\n  onStopClick: () => void;\n  onClearClick: () => void;\n  onGenerateClick: () => void;\n  onMethodSelect: (e: FormEvent<HTMLSelectElement>) => void;\n  selectedSearchMethod: string;\n};\n\nconst Controls = (props: ControlsProps): JSX.Element => (\n  <div className=\"Controls\">\n    <button onClick={props.isRunning ? props.onStopClick : props.onStartClick}>\n      {props.isRunning ? \"Stop\" : \"Start\"}\n    </button>\n    <button onClick={props.onClearClick} disabled={props.isRunning}>\n      Clear\n    </button>\n    <button onClick={props.onGenerateClick} disabled={props.isRunning}>\n      Generate\n    </button>\n    <select onChange={props.onMethodSelect} value={props.selectedSearchMethod}>\n      {Object.entries(methods).map(([key, method]) => (\n        <option key={key} value={key}>\n          {method.name}\n        </option>\n      ))}\n    </select>\n  </div>\n);\n\nexport default Controls;\n","import React from \"react\";\nimport Vec2d from \"../utils/Vec2d\";\n\ntype MazeProps = {\n  numRows: number;\n  numCols: number;\n  style: React.CSSProperties;\n  getSquareClassName: (pos: Vec2d) => string;\n  onMouseUp: (pos: Vec2d) => void;\n  onMouseDown: (pos: Vec2d) => void;\n  onMouseEnter: (pos: Vec2d) => void;\n};\n\nconst Maze = (props: MazeProps): JSX.Element => {\n  const squares = [];\n\n  for (let row = 0; row < props.numRows; ++row) {\n    for (let col = 0; col < props.numCols; ++col) {\n      const pos = new Vec2d(col, row);\n\n      squares.push(\n        <div\n          key={pos.toString()}\n          className={props.getSquareClassName(pos)}\n          onMouseUp={() => props.onMouseUp(pos)}\n          onMouseDown={() => props.onMouseDown(pos)}\n          onMouseEnter={() => props.onMouseEnter(pos)}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"Maze\" style={props.style}>\n      {squares}\n    </div>\n  );\n};\n\nexport default Maze;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PathFinder from \"./Components/PathFinder\";\nimport \"./index.css\";\n\nconst buildPathFinderProps = () => {\n  // @ts-ignore\n  const bodyPadding = parseInt(getComputedStyle(document.body).getPropertyValue(\"padding-left\"));\n  // @ts-ignore\n  const headerHeight = parseInt(getComputedStyle(document.querySelector(\"header\")).getPropertyValue(\"height\"));\n  const squareWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue(\"--square-width\"));\n\n  const cols = Math.floor((window.innerWidth - 2 * bodyPadding) / squareWidth);\n  const rows = Math.floor((window.innerHeight - 2 * headerHeight - bodyPadding) / squareWidth);\n\n  return {\n    mazeSize: { cols, rows },\n    mazeStyle: {\n      gridTemplateColumns: `repeat(${cols}, ${squareWidth}px)`,\n      gridTemplateRows: `repeat(${rows}, ${squareWidth}px)`,\n    },\n  };\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathFinder {...buildPathFinderProps()} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}