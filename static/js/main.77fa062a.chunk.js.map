{"version":3,"sources":["search/methods/bidirectional-bfs.ts","search/utils/Vec2d.ts","search/SearchMap.ts","search/index.ts","search/utils/Queue.ts","search/methods/breadth-first-search.ts","Components/PathFinder.tsx","search/methods/greedy-best-first-search.ts","search/methods/depth-first-search.ts","search/methods/index.ts","Components/utils/sleep.ts","Components/Controls.tsx","Components/PathMap.tsx","index.tsx"],"names":["Direction","nodeHistory","Vec2d","x","y","v","this","minX","minY","maxX","maxY","Math","floor","random","SearchMap","numCols","numRows","walls","Set","pos","isWithinBounds","Error","toString","map","isWall","delete","add","has","neighbours","dx","dy","neighbour","push","rewind","node","path","prev","unshift","Queue","items","isEmpty","shift","size","length","bfs","name","start","target","visited","queue","dequeue","current","found","equals","getNeighbours","hash","enqueue","f","MovingState","biDirBfs","visitedForward","visitedBackward","direction","Forward","Backward","neighbourNode","intersection","filter","n","sort","defaultRewind","reverse","manhattanDistance","a","b","abs","greedyBestFirstSearch","PriorityQueue","comparator","initialValues","dfs","params","methods","breadthFirstSearch","biDirectionalBfs","greedBestFirstSearch","sleep","ms","Promise","r","setTimeout","Controls","props","className","onClick","isRunning","onStopClick","onStartClick","onClearClick","disabled","onGenerateClick","onChange","onMethodSelect","value","selectedMethod","Object","entries","key","method","PathMap","squares","row","col","getSquareClassName","onMouseUp","onMouseDown","onMouseEnter","style","getInitialMap","cols","rows","getInitialStart","getInitialTarget","getInitialVisited","getInitialSolution","PathFinder","mapSize","mapStyle","useState","setMap","setStart","setTarget","setVisited","solution","setSolution","setMethod","None","moving","setMoving","isDrawing","setIsDrawing","Date","now","setStopTime","search","useRef","running","setRunning","handleStartClick","generateSearch","next","done","state","handleClearClick","toggleWall","e","Start","Target","ReactDOM","render","StrictMode","bodyPadding","parseInt","getComputedStyle","document","body","getPropertyValue","headerHeight","querySelector","squareWidth","documentElement","window","innerWidth","innerHeight","gridTemplateColumns","gridTemplateRows","buildPathFinderProps","getElementById"],"mappings":"iJAIKA,EAUDC,E,oGCdiBC,E,WACnB,WAAqBC,EAAoBC,GAAY,yBAAhCD,IAA+B,KAAXC,I,uCAEzC,SAAWC,GACT,OAAO,IAAIH,EAAMI,KAAKH,EAAIE,EAAEF,EAAGG,KAAKF,EAAIC,EAAED,K,oBAG5C,SAAcC,GACZ,OAAOC,KAAKH,IAAME,EAAEF,GAAKG,KAAKF,IAAMC,EAAED,I,sBAGxC,WACE,MAAM,IAAN,OAAWE,KAAKH,EAAhB,aAAsBG,KAAKF,EAA3B,Q,qBAGF,SAAqBG,EAAcC,EAAcC,EAAcC,GAC7D,OAAO,IAAIR,EACTS,KAAKC,MAAML,EAAOI,KAAKE,UAAYJ,EAAOF,IAC1CI,KAAKC,MAAMJ,EAAOG,KAAKE,UAAYH,EAAOF,S,KChB3BM,E,WAGnB,WAA4BC,EAA0BC,GAAkB,yBAA5CD,UAA2C,KAAjBC,UAAiB,KAF/DC,MAAQ,IAAIC,I,8CAIpB,SAAkBC,GAChB,IAAKb,KAAKc,eAAeD,GACvB,MAAM,IAAIE,MAAJ,yBAA4BF,EAAIG,aAGxC,IAAMC,EAAM,IAAIT,EAAUR,KAAKS,QAAST,KAAKU,SAS7C,OARAO,EAAIN,MAAQ,IAAIC,IAAJ,YAAYZ,KAAKW,QAEzBM,EAAIC,OAAOL,GACbI,EAAIN,MAAMQ,OAAON,EAAIG,YAErBC,EAAIN,MAAMS,IAAIP,EAAIG,YAGbC,I,oBAGT,SAAcJ,GACZ,OAAOb,KAAKW,MAAMU,IAAIR,EAAIG,c,2BAG5B,SAAqBH,GAUnB,IATA,IAAMS,EAAa,GASnB,MAPa,CACX,CAAEC,GAAI,EAAGC,GAAI,GACb,CAAED,GAAI,EAAGC,GAAI,GACb,CAAED,IAAK,EAAGC,GAAI,GACd,CAAED,GAAI,EAAGC,IAAK,IAGhB,eAA+B,CAA1B,WAAQD,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,GACTC,EAAYZ,EAAIO,IAAI,IAAIxB,EAAM2B,EAAIC,IAEnCxB,KAAKc,eAAeW,KAIpBzB,KAAKkB,OAAOO,IACfH,EAAWI,KAAKD,IAIpB,OAAOH,I,4BAGT,SAAuBT,GACrB,OAAOA,EAAIhB,GAAK,GAAKgB,EAAIf,GAAK,GAAKe,EAAIhB,EAAIG,KAAKS,SAAWI,EAAIf,EAAIE,KAAKU,Y,KC5B/DiB,EAAS,SAACC,GAGrB,IAFA,IAAMC,EAAO,GAEND,EAAKE,MACVD,EAAKE,QAAQH,EAAKf,KAClBe,EAAOA,EAAKE,KAGd,OAAOD,GClCYG,E,WACnB,aAAsC,IAAlBC,EAAiB,uDAAJ,GAAI,yBAAjBA,Q,2CAEpB,WAAqC,IAAD,GAClC,EAAAjC,KAAKiC,OAAMP,KAAX,qB,qBAGF,WACE,GAAI1B,KAAKkC,UACP,MAAM,IAAInB,MAAM,8BAGlB,OAAOf,KAAKiC,MAAME,U,qBAGpB,WACE,OAAqB,IAAdnC,KAAKoC,O,gBAGd,WACE,OAAOpC,KAAKiC,MAAMI,W,KCKPC,EAFW,CAAEC,KAAM,uBAAwBC,MApB/C,UAAG,qGAAavB,EAAb,EAAaA,IAAKuB,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,OAC/BC,EAAU,IAAI9B,IAAY,CAAC4B,EAAMxB,aACjC2B,EAAQ,IAAIX,EAAkB,CAAC,CAAEnB,IAAK2B,KAFhC,UAIJG,EAAMT,UAJF,iBAOV,OAFMN,EAAOe,EAAMC,UALT,SAOJ,CAAEC,QAASjB,EAAMc,UAASI,MAAOlB,EAAKf,IAAIkC,OAAON,IAP7C,qBAScxB,EAAI+B,cAAcpB,EAAKf,MATrC,IASV,2BAAWY,EAA0C,QAC7CwB,EAAOxB,EAAUT,WAElB0B,EAAQrB,IAAI4B,KACfP,EAAQtB,IAAI6B,GACZN,EAAMO,QAAQ,CAAErC,IAAKY,EAAWK,KAAMF,KAdhC,0BAAAuB,IAAA,0DAoBmDxB,W,SLnB5DjC,O,qBAAAA,I,wBAAAA,M,KAYL,IMAK0D,ENkEUC,EAFgB,CAAEd,KAAM,oBAAqBC,MAhEjD,UAAG,iHAAavB,EAAb,EAAaA,IAAKuB,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,OACrC9C,EAAc,GAER2D,EAAiB,IAAI1C,IAAY,CAAC4B,EAAMxB,aACxCuC,EAAkB,IAAI3C,IAAY,CAAC6B,EAAOzB,aAE1C2B,EAAQ,IAAIX,EAAuB,CACvC,CACEJ,KAAM,CAAEf,IAAK2B,GACbgB,UAAW9D,EAAU+D,SAEvB,CACE7B,KAAM,CAAEf,IAAK4B,GACbe,UAAW9D,EAAUgE,YAbb,UAiBJf,EAAMT,UAjBF,iBAwBV,OAxBU,EAkBkBS,EAAMC,UAA1BhB,EAlBE,EAkBFA,KAAM4B,EAlBJ,EAkBIA,UAERV,EACHU,IAAc9D,EAAU+D,SAAWF,EAAgBlC,IAAIO,EAAKf,IAAIG,aAChEwC,IAAc9D,EAAUgE,UAAYJ,EAAejC,IAAIO,EAAKf,IAAIG,YAtBzD,UAwBJ,CAAE6B,QAASjB,EAAMc,QAAS,IAAI9B,IAAJ,sBAAY0C,GAAZ,YAA+BC,KAAmBT,SAxBxE,sBA0Bc7B,EAAI+B,cAAcpB,EAAKf,MA1BrC,IA0BV,2BAAWY,EAA0C,QAC7CwB,EAAOxB,EAAUT,WACnBkC,GAAU,EAEVM,IAAc9D,EAAU+D,QACrBH,EAAejC,IAAI4B,KACtBK,EAAelC,IAAI6B,GACnBC,GAAU,GAEFK,EAAgBlC,IAAI4B,KAC9BM,EAAgBnC,IAAI6B,GACpBC,GAAU,GAGRA,IACIS,EAAgB,CACpB/B,KAAM,CACJf,IAAKY,EACLK,KAAMF,GAER4B,aAGF7D,EAAY+B,KAAKiC,GACjBhB,EAAMO,QAAQS,IAlDR,0BAAAR,IAAA,0DAgEqDxB,OARpD,SAACC,GACd,IAAMgC,EAAejE,EAClBkE,QAAO,gBAASC,EAAT,EAAGlC,KAAH,OAAiBA,EAAKf,IAAIkC,OAAOe,EAAEjD,QAC1CkD,MAAK,qBAAGP,YAA+B9D,EAAU+D,SAAW,EAAI,KAEnE,MAAM,GAAN,mBAAWO,EAAcJ,EAAa,GAAGhC,OAAzC,YAAmDoC,EAAcJ,EAAa,GAAGhC,MAAMqC,c,iBOzEnFC,EAAoB,SAACC,EAAUC,GAAX,OAAgC/D,KAAKgE,IAAIF,EAAEtE,EAAIuE,EAAEvE,GAAKQ,KAAKgE,IAAIF,EAAErE,EAAIsE,EAAEtE,IA4BlFwE,EAF6B,CAAE/B,KAAM,2BAA4BC,MAxBrE,UAAG,qGAAavB,EAAb,EAAaA,IAAKuB,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,OAC/BC,EAAU,IAAI9B,IAAY,CAAC4B,EAAMxB,aAEjC2B,EAAQ,IAAI4B,IAA0B,CAC1CC,WAAY,SAACL,EAAGC,GAAJ,OAAUF,EAAkBC,EAAEtD,IAAK4B,GAAUyB,EAAkBE,EAAEvD,IAAK4B,IAClFgC,cAAe,CAAC,CAAE5D,IAAK2B,MALb,YAQLG,EAAMN,OAAS,GARV,iBAWV,OAFMT,EAAOe,EAAMC,UATT,SAWJ,CAAEC,QAASjB,EAAMc,UAASI,MAAOlB,EAAKf,IAAIkC,OAAON,IAX7C,qBAacxB,EAAI+B,cAAcpB,EAAKf,MAbrC,IAaV,2BAAWY,EAA0C,QAC7CwB,EAAOxB,EAAUT,WAElB0B,EAAQrB,IAAI4B,KACfP,EAAQtB,IAAI6B,GACZN,EAAMA,MAAM,CAAE9B,IAAKY,EAAWK,KAAMF,KAlB9B,0BAAAuB,IAAA,0DAwByExB,UC5BjF+C,EAAG,UAAG,SAANA,EAAiB9C,EAAkBc,EAAsBiC,GAAnD,6EACV,OADU,SACJ,CAAE9B,QAASjB,EAAMc,UAASI,MAAOlB,EAAKf,IAAIkC,OAAO4B,EAAOlC,SADpD,qBAGckC,EAAO1D,IAAI+B,cAAcpB,EAAKf,MAH5C,4DAGCY,EAHD,QAIFwB,EAAOxB,EAAUT,WAElB0B,EAAQrB,IAAI4B,GANT,iBAQN,OADAP,EAAQtB,IAAI6B,GACZ,gBAAOyB,EAAI,CAAE7D,IAAKY,EAAWK,KAAMF,GAAQc,EAASiC,GAApD,SARM,QASNjC,EAAQvB,OAAO8B,GATT,sHAAAE,IAAA,kDAANuB,EAAM,wBCUGE,EAPC,CACd,uBAAwBC,EACxB,oBAAqBC,EACrB,2BAA4BC,EAC5B,qBDWqC,CAAExC,KAAM,qBAAsBC,MAJ1D,UAAG,SAARA,EAAmBmC,GAAX,iEACZ,uBAAOD,EAAI,CAAE7D,IAAK8D,EAAOnC,OAAS,IAAI5B,IAAI,CAAC+D,EAAOnC,MAAMxB,aAAc2D,GAAtE,QADY,oCAARnC,MAIsEb,WEhB7DqD,EAJJ,uCAAG,WAAOC,GAAP,SAAAd,EAAA,sEACN,IAAIe,SAAQ,SAACC,GAAD,OAAOC,WAAWD,EAAGF,MAD3B,2CAAH,sD,OCkCII,EArBE,SAACC,GAAD,OACf,sBAAKC,UAAU,WAAf,UACE,wBAAQC,QAASF,EAAMG,UAAYH,EAAMI,YAAcJ,EAAMK,aAA7D,SACGL,EAAMG,UAAY,OAAS,UAE9B,wBAAQD,QAASF,EAAMM,aAAcC,SAAUP,EAAMG,UAArD,mBAGA,wBAAQD,QAASF,EAAMQ,gBAAiBD,SAAUP,EAAMG,UAAxD,sBAGA,wBAAQM,SAAUT,EAAMU,eAAgBC,MAAOX,EAAMY,eAArD,SACGC,OAAOC,QAAQxB,GAAS3D,KAAI,mCAAEoF,EAAF,KAAOC,EAAP,YAC3B,wBAAkBL,MAAOI,EAAzB,SACGC,EAAO/D,MADG8D,YCaNE,EA1BC,SAACjB,GAGf,IAFA,IAAMkB,EAAU,GAEPC,EAAM,EAAGA,EAAMnB,EAAM5E,UAAW+F,EACvC,IAD6C,IAAD,WACnCC,GACP,IAAM7F,EAAM,IAAIjB,EAAM8G,EAAKD,GAE3BD,EAAQ9E,KACN,qBAEE6D,UAAWD,EAAMqB,mBAAmB9F,GACpC+F,UAAW,kBAAMtB,EAAMsB,UAAU/F,IACjCgG,YAAa,kBAAMvB,EAAMuB,YAAYhG,IACrCiG,aAAc,kBAAMxB,EAAMwB,aAAajG,KAJlCA,EAAIG,cALN0F,EAAM,EAAGA,EAAMpB,EAAM7E,UAAWiG,EAAM,EAAtCA,GAeX,OACE,qBAAKnB,UAAU,UAAUwB,MAAOzB,EAAMyB,MAAtC,SACGP,M,SNlBFpD,O,eAAAA,I,iBAAAA,I,oBAAAA,M,KAML,IAAM4D,EAAgB,SAACC,EAAcC,GAAf,OAAgC,IAAI1G,EAAUyG,EAAMC,IACpEC,EAAkB,SAACF,EAAcC,GAAf,OAAgC,IAAItH,EAAMS,KAAKC,MAAM2G,EAAO,GAAK,EAAG5G,KAAKC,MAAM4G,EAAO,GAAK,IAC7GE,EAAmB,SAACH,EAAcC,GAAf,OAAgC,IAAItH,EAAMqH,EAAO5G,KAAKC,MAAM2G,EAAO,GAAI5G,KAAKC,MAAM4G,EAAO,GAAK,IACjHG,EAAoB,kBAAM,IAAIzG,KAC9B0G,EAAqB,kBAAM,IAAI1G,KA4LtB2G,EA1LI,SAAC,GAAyE,IAAD,IAAtEC,QAAWP,EAA2D,EAA3DA,KAAMC,EAAqD,EAArDA,KAAQO,EAA6C,EAA7CA,SAC7C,EAAsBC,mBAASV,EAAcC,EAAMC,IAAnD,mBAAOjG,EAAP,KAAY0G,EAAZ,KACA,EAA0BD,mBAASP,EAAgBF,EAAMC,IAAzD,mBAAO1E,EAAP,KAAcoF,EAAd,KACA,EAA4BF,mBAASN,EAAiBH,EAAMC,IAA5D,mBAAOzE,EAAP,KAAeoF,EAAf,KACA,EAA8BH,mBAASL,KAAvC,mBAAO3E,EAAP,KAAgBoF,EAAhB,KACA,EAAgCJ,mBAASJ,KAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KAEA,EAA4BN,mBAAS,wBAArC,mBAAOpB,EAAP,KAAe2B,EAAf,KACA,EAA4BP,mBAAStE,EAAY8E,MAAjD,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCV,oBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,GAAlB,KACA,GAAwBZ,mBAASa,KAAKC,KAA7BC,GAAT,qBAEMC,GAASC,iBAAuB,MAEhCC,GAAUD,kBAAO,GACjBlD,GAAY,kBAAemD,GAAQ/F,SACnCgG,GAAa,SAAC1D,GAClByD,GAAQ/F,QAAUsC,EACbA,GAAGsD,GAAYF,KAAKC,MAmCrBM,GAAgB,uCAAG,4BAAA3E,EAAA,sDACvB0E,IAAW,GAENH,GAAO7F,UACV6F,GAAO7F,QAAUkG,KACjBf,EAAYV,MALS,WAWrB0B,EAAON,GAAO7F,QAAQmG,QACb/C,OAAO+C,EAAK/C,QAChBR,KAbgB,iEAcfT,EAAM,GAdS,WAebgE,EAAKC,KAfQ,uBAiBvBP,GAAO7F,QAAU,KACjBgG,IAAW,GAlBY,4CAAH,qDAqBhBE,GAAc,UAAG,SAAjBA,IAAiB,2FAEDnE,EAAQ0B,GAAQ9D,MAAM,CAAEvB,MAAKuB,QAAOC,YAFnC,2GAGnB,OADSyG,EAFU,iBAGb,kBAAMpB,EAAW,IAAIlH,IAAJ,YAAYsI,EAAMxG,YAHtB,WAKfwG,EAAMpG,MALS,2IAMXiF,EAAWT,IACjBU,EAAYD,GAPK,cAUCnD,EAAQ0B,GAAQ3E,OAAOuH,EAAMrG,UAV9B,yGAWf,OADShC,EAVM,iBAWT,kBAAMmH,EAAY,IAAIpH,IAAJ,YAAYmH,EAAS3G,IAAIP,EAAIG,gBAXtC,kPAAAmC,IAAA,6hBAAAA,IAAA,kDAAjB4F,EAAiB,wBAuBjBI,GAAmB,WACvBxB,EAAOX,EAAcC,EAAMC,IAC3BU,EAAST,EAAgBF,EAAMC,IAC/BW,EAAUT,EAAiBH,EAAMC,IACjCY,EAAWT,KACXW,EAAYV,KACZuB,IAAW,GACXH,GAAO7F,QAAU,MA0DnB,OACE,sBAAK0C,UAAS,oBAAeE,KAAc,cAAgB,IAA3D,UACE,cAAC,EAAD,CACEA,UAAWA,KACXE,aAAcmD,GACdpD,YA1EkB,WACtBmD,IAAW,IA0EPjD,aAAcuD,GACdrD,gBA9DsB,WAC1BqD,KAEA,IAAM3G,EAAQ5C,EAAMW,OAAO,EAAG,EAAG0G,EAAO,EAAGC,EAAO,GAC5CzE,EAAS7C,EAAMW,OAAe,EAAP0G,EAAY,EAAW,EAAPC,EAAY,EAAGD,EAAMC,GAElEU,EAASpF,GACTqF,EAAUpF,GAIV,IAFA,IAAIxB,EAAM+F,EAAcC,EAAMC,GAErBT,EAAM,EAAGA,EAAMS,IAAQT,EAC9B,IAAK,IAAIC,EAAM,EAAGA,EAAMO,IAAQP,EAAK,CACnC,IAAM7F,EAAM,IAAIjB,EAAM8G,EAAKD,GAEvBjE,EAAMO,OAAOlC,IAAQ4B,EAAOM,OAAOlC,IAInCR,KAAKE,SAAW,MAClBU,EAAMA,EAAImI,WAAWvI,GACrB8G,EAAO1G,MA0CT+E,eApCqB,SAACqD,GAC1BpB,EAAUoB,EAAE5G,OAAOwD,QAoCfC,eAAgBI,IAElB,cAAC,EAAD,CACE5F,QAASwG,EACTzG,QAASwG,EACTF,MAAOU,EACPd,mBAvCqB,SAAC9F,GAC1B,OAAII,EAAIC,OAAOL,GACN,UAGL2B,EAAMO,OAAOlC,GACR,WAGL4B,EAAOM,OAAOlC,GACT,YAGLkH,EAAS1G,IAAIR,EAAIG,YACZ,cAGL0B,EAAQrB,IAAIR,EAAIG,YACX,aAGF,IAmBH4F,UA7JgB,WACpBwB,EAAUhF,EAAY8E,MACtBI,IAAa,IA4JTzB,YAzJkB,SAAChG,GACvB,IAAI4E,KAAJ,CAIA,GAAI5E,EAAIkC,OAAOP,GACb,OAAO4F,EAAUhF,EAAYkG,OAG/B,GAAIzI,EAAIkC,OAAON,GACb,OAAO2F,EAAUhF,EAAYmG,QAG/BjB,IAAa,GACbX,EAAO1G,EAAImI,WAAWvI,MA4IlBiG,aAzImB,SAACjG,GACxB,GAAIsH,IAAW/E,EAAY8E,OAASjH,EAAIC,OAAOL,GAC7C,OAAOsH,IAAW/E,EAAYkG,MAAQ1B,EAAS/G,GAAOgH,EAAUhH,IAG9DwH,GAAcxH,EAAIkC,OAAOP,IAAW3B,EAAIkC,OAAON,IACjDkF,EAAO1G,EAAImI,WAAWvI,W,MOrD5B2I,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,eArByB,WAE3B,IAAMC,EAAcC,SAASC,iBAAiBC,SAASC,MAAMC,iBAAiB,iBAExEC,EAAeL,SAASC,iBAAiBC,SAASI,cAAc,WAAWF,iBAAiB,WAC5FG,EAAcP,SAASC,iBAAiBC,SAASM,iBAAiBJ,iBAAiB,uBAEnF/C,EAAO5G,KAAKC,OAAO+J,OAAOC,WAAa,EAAIX,GAAeQ,GAC1DjD,EAAO7G,KAAKC,OAAO+J,OAAOE,YAAc,EAAIN,EAAeN,GAAeQ,GAEhF,MAAO,CACL3C,QAAS,CAAEP,OAAMC,QACjBO,SAAU,CACR+C,oBAAoB,UAAD,OAAYvD,EAAZ,aAAqBkD,EAArB,OACnBM,iBAAiB,UAAD,OAAYvD,EAAZ,aAAqBiD,EAArB,SAOFO,OAElBZ,SAASa,eAAe,W","file":"static/js/main.77fa062a.chunk.js","sourcesContent":["import { SearchMethod, SearchNode, SearchParams, SearchState, rewind as defaultRewind } from \"../\";\nimport Queue from \"../utils/Queue\";\nimport Vec2d from \"../utils/Vec2d\";\n\nenum Direction {\n  Forward,\n  Backward,\n}\n\ntype BiDirSearchNode = {\n  node: SearchNode;\n  direction: Direction;\n};\n\nlet nodeHistory: BiDirSearchNode[];\n\nconst start = function* ({ map, start, target }: SearchParams): Generator<SearchState> {\n  nodeHistory = [];\n\n  const visitedForward = new Set<string>([start.toString()]);\n  const visitedBackward = new Set<string>([target.toString()]);\n\n  const queue = new Queue<BiDirSearchNode>([\n    {\n      node: { pos: start },\n      direction: Direction.Forward,\n    },\n    {\n      node: { pos: target },\n      direction: Direction.Backward,\n    },\n  ]);\n\n  while (!queue.isEmpty()) {\n    const { node, direction } = queue.dequeue();\n\n    const found =\n      (direction === Direction.Forward && visitedBackward.has(node.pos.toString())) ||\n      (direction === Direction.Backward && visitedForward.has(node.pos.toString()));\n\n    yield { current: node, visited: new Set([...visitedForward, ...visitedBackward]), found };\n\n    for (const neighbour of map.getNeighbours(node.pos)) {\n      const hash = neighbour.toString();\n      let enqueue = false;\n\n      if (direction === Direction.Forward) {\n        if (!visitedForward.has(hash)) {\n          visitedForward.add(hash);\n          enqueue = true;\n        }\n      } else if (!visitedBackward.has(hash)) {\n        visitedBackward.add(hash);\n        enqueue = true;\n      }\n\n      if (enqueue) {\n        const neighbourNode = {\n          node: {\n            pos: neighbour,\n            prev: node,\n          },\n          direction,\n        };\n\n        nodeHistory.push(neighbourNode);\n        queue.enqueue(neighbourNode);\n      }\n    }\n  }\n};\n\nconst rewind = (node: SearchNode): Vec2d[] => {\n  const intersection = nodeHistory\n    .filter(({ node: n }) => node.pos.equals(n.pos))\n    .sort(({ direction }) => (direction === Direction.Forward ? -1 : 1));\n\n  return [...defaultRewind(intersection[0].node), ...defaultRewind(intersection[1].node).reverse()];\n};\n\nconst biDirBfs: SearchMethod = { name: \"Bidirectional BFS\", start, rewind };\n\nexport default biDirBfs;\n","export default class Vec2d {\n  constructor(readonly x: number, readonly y: number) {}\n\n  public add(v: Vec2d): Vec2d {\n    return new Vec2d(this.x + v.x, this.y + v.y);\n  }\n\n  public equals(v: Vec2d): boolean {\n    return this.x === v.x && this.y === v.y;\n  }\n\n  public toString(): string {\n    return `(${this.x}, ${this.y})`;\n  }\n\n  public static random(minX: number, minY: number, maxX: number, maxY: number): Vec2d {\n    return new Vec2d(\n      Math.floor(minX + Math.random() * (maxX - minX)),\n      Math.floor(minY + Math.random() * (maxY - minY))\n    );\n  }\n}\n","import Vec2d from \"./utils/Vec2d\";\n\nexport default class SearchMap {\n  private walls = new Set<string>();\n\n  public constructor(readonly numCols: number, readonly numRows: number) {}\n\n  public toggleWall(pos: Vec2d): SearchMap {\n    if (!this.isWithinBounds(pos)) {\n      throw new Error(`Out of bounds: ${pos.toString()}`);\n    }\n\n    const map = new SearchMap(this.numCols, this.numRows);\n    map.walls = new Set([...this.walls]);\n\n    if (map.isWall(pos)) {\n      map.walls.delete(pos.toString());\n    } else {\n      map.walls.add(pos.toString());\n    }\n\n    return map;\n  }\n\n  public isWall(pos: Vec2d): boolean {\n    return this.walls.has(pos.toString());\n  }\n\n  public getNeighbours(pos: Vec2d): Vec2d[] {\n    const neighbours = [];\n\n    const dirs = [\n      { dx: 1, dy: 0 },\n      { dx: 0, dy: 1 },\n      { dx: -1, dy: 0 },\n      { dx: 0, dy: -1 },\n    ];\n\n    for (const { dx, dy } of dirs) {\n      const neighbour = pos.add(new Vec2d(dx, dy));\n\n      if (!this.isWithinBounds(neighbour)) {\n        continue;\n      }\n\n      if (!this.isWall(neighbour)) {\n        neighbours.push(neighbour);\n      }\n    }\n\n    return neighbours;\n  }\n\n  private isWithinBounds(pos: Vec2d): boolean {\n    return pos.x >= 0 && pos.y >= 0 && pos.x < this.numCols && pos.y < this.numRows;\n  }\n}\n","import SearchMap from \"./SearchMap\";\nimport Vec2d from \"./utils/Vec2d\";\n\nexport type SearchParams = {\n  map: SearchMap;\n  start: Vec2d;\n  target: Vec2d;\n};\n\nexport type SearchNode = {\n  pos: Vec2d;\n  prev?: SearchNode;\n};\n\nexport type SearchState = {\n  current: SearchNode;\n  visited: Set<string>;\n  found: boolean;\n};\n\nexport type SearchMethod = {\n  name: string;\n  start: (params: SearchParams) => Generator<SearchState>;\n  rewind: (node: SearchNode) => Vec2d[];\n};\n\nexport const rewind = (node: SearchNode): Vec2d[] => {\n  const path = [];\n\n  while (node.prev) {\n    path.unshift(node.pos);\n    node = node.prev;\n  }\n\n  return path;\n};\n","export default class Queue<T> {\n  constructor(private items: T[] = []) {}\n\n  public enqueue(...items: T[]): void {\n    this.items.push(...items);\n  }\n\n  public dequeue(): T {\n    if (this.isEmpty()) {\n      throw new Error(\"Cannot dequeue empty queue\");\n    }\n\n    return this.items.shift() as T;\n  }\n\n  public isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  public get size(): number {\n    return this.items.length;\n  }\n}\n","import { SearchMethod, SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport Queue from \"../utils/Queue\";\n\nconst start = function* ({ map, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n  const queue = new Queue<SearchNode>([{ pos: start }]);\n\n  while (!queue.isEmpty()) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of map.getNeighbours(node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.enqueue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst bfs: SearchMethod = { name: \"Breadth-first search\", start, rewind };\n\nexport default bfs;\n","import React, { useRef, useState } from \"react\";\nimport SearchMap from \"../search/SearchMap\";\nimport methods from \"../search/methods\";\nimport Vec2d from \"../search/utils/Vec2d\";\nimport sleep from \"./utils/sleep\";\nimport Controls from \"./Controls\";\nimport PathMap from \"./PathMap\";\n\ntype PathFinderProps = {\n  mapSize: {\n    cols: number;\n    rows: number;\n  };\n  mapStyle: React.CSSProperties;\n};\n\nenum MovingState {\n  None,\n  Start,\n  Target,\n}\n\nconst getInitialMap = (cols: number, rows: number) => new SearchMap(cols, rows);\nconst getInitialStart = (cols: number, rows: number) => new Vec2d(Math.floor(cols / 4) - 1, Math.floor(rows / 2) - 1);\nconst getInitialTarget = (cols: number, rows: number) => new Vec2d(cols - Math.floor(cols / 4), Math.floor(rows / 2) - 1);\nconst getInitialVisited = () => new Set<string>();\nconst getInitialSolution = () => new Set<string>();\n\nconst PathFinder = ({ mapSize: { cols, rows }, mapStyle }: PathFinderProps): JSX.Element => {\n  const [map, setMap] = useState(getInitialMap(cols, rows));\n  const [start, setStart] = useState(getInitialStart(cols, rows));\n  const [target, setTarget] = useState(getInitialTarget(cols, rows));\n  const [visited, setVisited] = useState(getInitialVisited());\n  const [solution, setSolution] = useState(getInitialSolution());\n\n  const [method, setMethod] = useState(\"breadth-first-search\");\n  const [moving, setMoving] = useState(MovingState.None);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [, setStopTime] = useState(Date.now);\n\n  const search = useRef<Generator|null>(null);\n\n  const running = useRef(false);\n  const isRunning = (): boolean => running.current;\n  const setRunning = (r: boolean): void => {\n    running.current = r;\n    if (!r) setStopTime(Date.now);\n  };\n\n  const handleMouseUp = (): void => {\n    setMoving(MovingState.None);\n    setIsDrawing(false);\n  };\n\n  const handleMouseDown = (pos: Vec2d): void => {\n    if (isRunning()) {\n      return;\n    }\n\n    if (pos.equals(start)) {\n      return setMoving(MovingState.Start);\n    }\n\n    if (pos.equals(target)) {\n      return setMoving(MovingState.Target);\n    }\n\n    setIsDrawing(true);\n    setMap(map.toggleWall(pos));\n  };\n\n  const handleMouseEnter = (pos: Vec2d): void => {\n    if (moving !== MovingState.None && !map.isWall(pos)) {\n      return moving === MovingState.Start ? setStart(pos) : setTarget(pos);\n    }\n\n    if (isDrawing && !pos.equals(start) && !pos.equals(target)) {\n      setMap(map.toggleWall(pos));\n    }\n  };\n\n  const handleStartClick = async (): Promise<void> => {\n    setRunning(true);\n\n    if (!search.current) {\n      search.current = generateSearch();\n      setSolution(getInitialSolution());\n    }\n\n    let next;\n\n    do {\n      next = search.current.next();\n      if (next.value) next.value();\n      if (!isRunning()) return;\n      await sleep(5);\n    } while (!next.done);\n\n    search.current = null;\n    setRunning(false);\n  };\n\n  const generateSearch = function* (): Generator<() => void> {\n    // @ts-ignore\n    for (const state of methods[method].start({ map, start, target })) {\n      yield () => setVisited(new Set([...state.visited]));\n\n      if (state.found) {\n        const solution = getInitialSolution();\n        setSolution(solution);\n\n        // @ts-ignore\n        for (const pos of methods[method].rewind(state.current)) {\n          yield () => setSolution(new Set([...solution.add(pos.toString())]));\n        }\n\n        return;\n      }\n    }\n  };\n\n  const handleStopClick = (): void => {\n    setRunning(false);\n  };\n\n  const handleClearClick = (): void => {\n    setMap(getInitialMap(cols, rows));\n    setStart(getInitialStart(cols, rows));\n    setTarget(getInitialTarget(cols, rows));\n    setVisited(getInitialVisited());\n    setSolution(getInitialSolution());\n    setRunning(false);\n    search.current = null;\n  };\n\n  const handleGenerateClick = (): void => {\n    handleClearClick();\n\n    const start = Vec2d.random(0, 0, cols / 3, rows / 3);\n    const target = Vec2d.random((cols * 2) / 3, (rows * 2) / 3, cols, rows);\n\n    setStart(start);\n    setTarget(target);\n\n    let map = getInitialMap(cols, rows);\n\n    for (let row = 0; row < rows; ++row) {\n      for (let col = 0; col < cols; ++col) {\n        const pos = new Vec2d(col, row);\n\n        if (start.equals(pos) || target.equals(pos)) {\n          continue;\n        }\n\n        if (Math.random() < 0.25) {\n          map = map.toggleWall(pos);\n          setMap(map);\n        }\n      }\n    }\n  };\n\n  const handleMethodSelect = (e: any): void => {\n    setMethod(e.target.value);\n  };\n\n  const getSquareClassName = (pos: Vec2d): string => {\n    if (map.isWall(pos)) {\n      return \"is-wall\";\n    }\n\n    if (start.equals(pos)) {\n      return \"is-start\";\n    }\n\n    if (target.equals(pos)) {\n      return \"is-target\";\n    }\n\n    if (solution.has(pos.toString())) {\n      return \"is-solution\";\n    }\n\n    if (visited.has(pos.toString())) {\n      return \"is-visited\";\n    }\n\n    return \"\";\n  };\n\n  return (\n    <div className={`PathFinder${isRunning() ? \" is-running\" : \"\"}`}>\n      <Controls\n        isRunning={isRunning()}\n        onStartClick={handleStartClick}\n        onStopClick={handleStopClick}\n        onClearClick={handleClearClick}\n        onGenerateClick={handleGenerateClick}\n        onMethodSelect={handleMethodSelect}\n        selectedMethod={method}\n      />\n      <PathMap\n        numRows={rows}\n        numCols={cols}\n        style={mapStyle}\n        getSquareClassName={getSquareClassName}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default PathFinder;\n","import PriorityQueue from \"ts-priority-queue\";\nimport { SearchMethod, SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport Vec2d from \"../utils/Vec2d\";\n\nconst manhattanDistance = (a: Vec2d, b: Vec2d): number => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\nconst start = function* ({ map, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n\n  const queue = new PriorityQueue<SearchNode>({\n    comparator: (a, b) => manhattanDistance(a.pos, target) - manhattanDistance(b.pos, target),\n    initialValues: [{ pos: start }],\n  });\n\n  while (queue.length > 0) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of map.getNeighbours(node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.queue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst greedyBestFirstSearch: SearchMethod = { name: \"Greedy best-first search\", start, rewind };\n\nexport default greedyBestFirstSearch;\n","import { SearchMethod, SearchNode, SearchParams, SearchState, rewind } from \"../\";\n\nconst dfs = function* (node: SearchNode, visited: Set<string>, params: SearchParams): Generator<SearchState> {\n  yield { current: node, visited, found: node.pos.equals(params.target) };\n\n  for (const neighbour of params.map.getNeighbours(node.pos)) {\n    const hash = neighbour.toString();\n\n    if (!visited.has(hash)) {\n      visited.add(hash);\n      yield* dfs({ pos: neighbour, prev: node }, visited, params);\n      visited.delete(hash);\n    }\n  }\n};\n\nconst start = function* (params: SearchParams): Generator<SearchState> {\n  yield* dfs({ pos: params.start }, new Set([params.start.toString()]), params);\n};\n\nconst depthFirstSearch: SearchMethod = { name: \"Depth-first search\", start, rewind };\n\nexport default depthFirstSearch;\n","import breadthFirstSearch from \"./breadth-first-search\";\nimport biDirectionalBfs from \"./bidirectional-bfs\";\nimport greedBestFirstSearch from \"./greedy-best-first-search\";\nimport depthFirstSearch from \"./depth-first-search\";\n\nconst methods = {\n  \"breadth-first-search\": breadthFirstSearch,\n  \"bidirectional-bfs\": biDirectionalBfs,\n  \"greedy-best-first-search\": greedBestFirstSearch,\n  \"depth-first-search\": depthFirstSearch,\n};\n\nexport default methods;\n","const sleep = async (ms: number): Promise<void> => {\n  await new Promise((r) => setTimeout(r, ms));\n};\n\nexport default sleep;\n","import { FormEvent } from \"react\";\nimport methods from \"../search/methods\";\n\ntype ControlsProps = {\n  isRunning: boolean;\n  onStartClick: () => void;\n  onStopClick: () => void;\n  onClearClick: () => void;\n  onGenerateClick: () => void;\n  onMethodSelect: (e: FormEvent<HTMLSelectElement>) => void;\n  selectedMethod: string;\n};\n\nconst Controls = (props: ControlsProps): JSX.Element => (\n  <div className=\"Controls\">\n    <button onClick={props.isRunning ? props.onStopClick : props.onStartClick}>\n      {props.isRunning ? \"Stop\" : \"Start\"}\n    </button>\n    <button onClick={props.onClearClick} disabled={props.isRunning}>\n      Clear\n    </button>\n    <button onClick={props.onGenerateClick} disabled={props.isRunning}>\n      Generate\n    </button>\n    <select onChange={props.onMethodSelect} value={props.selectedMethod}>\n      {Object.entries(methods).map(([key, method]) => (\n        <option key={key} value={key}>\n          {method.name}\n        </option>\n      ))}\n    </select>\n  </div>\n);\n\nexport default Controls;\n","import React from \"react\";\nimport Vec2d from \"../search/utils/Vec2d\";\n\ntype PathMapProps = {\n  numRows: number;\n  numCols: number;\n  style: React.CSSProperties;\n  getSquareClassName: (pos: Vec2d) => string;\n  onMouseUp: (pos: Vec2d) => void;\n  onMouseDown: (pos: Vec2d) => void;\n  onMouseEnter: (pos: Vec2d) => void;\n};\n\nconst PathMap = (props: PathMapProps): JSX.Element => {\n  const squares = [];\n\n  for (let row = 0; row < props.numRows; ++row) {\n    for (let col = 0; col < props.numCols; ++col) {\n      const pos = new Vec2d(col, row);\n\n      squares.push(\n        <div\n          key={pos.toString()}\n          className={props.getSquareClassName(pos)}\n          onMouseUp={() => props.onMouseUp(pos)}\n          onMouseDown={() => props.onMouseDown(pos)}\n          onMouseEnter={() => props.onMouseEnter(pos)}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"PathMap\" style={props.style}>\n      {squares}\n    </div>\n  );\n};\n\nexport default PathMap;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PathFinder from \"./Components/PathFinder\";\nimport \"./index.css\";\n\nconst buildPathFinderProps = () => {\n  // @ts-ignore\n  const bodyPadding = parseInt(getComputedStyle(document.body).getPropertyValue(\"padding-left\"));\n  // @ts-ignore\n  const headerHeight = parseInt(getComputedStyle(document.querySelector(\"header\")).getPropertyValue(\"height\"));\n  const squareWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue(\"--map-square-width\"));\n\n  const cols = Math.floor((window.innerWidth - 2 * bodyPadding) / squareWidth);\n  const rows = Math.floor((window.innerHeight - 2 * headerHeight - bodyPadding) / squareWidth);\n\n  return {\n    mapSize: { cols, rows },\n    mapStyle: {\n      gridTemplateColumns: `repeat(${cols}, ${squareWidth}px)`,\n      gridTemplateRows: `repeat(${rows}, ${squareWidth}px)`,\n    },\n  };\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathFinder {...buildPathFinderProps()} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}