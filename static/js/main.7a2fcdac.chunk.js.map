{"version":3,"sources":["search/methods/bidirectional-bfs.ts","utils/Vec2d.ts","maze/index.ts","maze/Maze.ts","maze/generators/prims.ts","maze/generators/index.ts","maze/generators/binary-tree.ts","maze/generators/random.ts","search/index.ts","search/methods/utils/Queue.ts","search/methods/breadth-first-search.ts","Components/PathFinder.tsx","search/methods/greedy-best-first-search.ts","search/methods/depth-first-search.ts","search/methods/index.ts","Components/utils/sleep.ts","Components/Controls.tsx","Components/Maze.tsx","index.tsx"],"names":["Direction","nodeHistory","Vec2d","x","y","v","this","from","to","Math","floor","random","DIRECTIONS","dx","dy","getAdjacentPositions","maze","pos","dist","positions","adjPos","add","isWithinBounds","push","getAdjacentWallPositions","filter","isWall","getAdjacentPathPositions","findEmptySquareInBounds","square","Maze","numCols","numRows","walls","Set","toggleWalls","empty","Error","toString","delete","has","row","col","randomElement","elements","length","generators","prims","name","generate","cols","rows","full","frontier","origin","some","cell","toggleWall","adjPath","randomPath","binaryTree","wallLeftOrUp","rewind","node","path","prev","unshift","Queue","items","isEmpty","shift","size","bfs","start","target","visited","queue","dequeue","current","found","equals","neighbour","hash","enqueue","f","MovingState","biDirBfs","visitedForward","visitedBackward","direction","Forward","Backward","neighbourNode","intersection","n","sort","defaultRewind","reverse","manhattanDistance","a","b","abs","greedyBestFirstSearch","PriorityQueue","comparator","initialValues","dfs","params","methods","breadthFirstSearch","biDirectionalBfs","greedBestFirstSearch","depthFirstSearch","sleep","ms","Promise","r","setTimeout","Controls","props","className","onChange","onMazeGeneratorSelect","value","selectedMazeGenerator","Object","entries","mazeGenerators","map","key","generator","onClick","onGenerateClick","disabled","isRunning","onClearClick","onSearchMethodSelect","selectedSearchMethod","searchMethods","method","onStopClick","onStartClick","squares","getSquareClassName","onMouseUp","onMouseDown","onMouseEnter","style","getInitialMaze","getInitialStart","getInitialTarget","getInitialVisited","getInitialSolution","PathFinder","mazeSize","mazeStyle","useState","setMaze","setStart","setTarget","setVisited","solution","setSolution","None","moving","setMoving","isDrawing","setIsDrawing","Date","now","setFinishedAt","mazeGenerator","setMazeGenerator","searchMethod","setSearchMethod","currentSearch","useRef","setCurrentSearch","s","running","setIsRunning","handleStartClick","generateSearch","next","done","state","handleClearClick","e","Start","Target","ReactDOM","render","StrictMode","bodyPadding","parseInt","getComputedStyle","document","body","getPropertyValue","headerHeight","querySelector","squareWidth","documentElement","window","innerWidth","max","innerHeight","gridTemplateColumns","gridTemplateRows","buildPathFinderProps","getElementById"],"mappings":"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","file":"static/js/main.7a2fcdac.chunk.js","sourcesContent":["import { SearchNode, SearchParams, SearchState, rewind as defaultRewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Queue from \"./utils/Queue\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nenum Direction {\n  Forward,\n  Backward,\n}\n\ntype BiDirSearchNode = {\n  node: SearchNode;\n  direction: Direction;\n};\n\nlet nodeHistory: BiDirSearchNode[];\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  nodeHistory = [];\n\n  const visitedForward = new Set<string>([start.toString()]);\n  const visitedBackward = new Set<string>([target.toString()]);\n\n  const queue = new Queue<BiDirSearchNode>([\n    {\n      node: { pos: start },\n      direction: Direction.Forward,\n    },\n    {\n      node: { pos: target },\n      direction: Direction.Backward,\n    },\n  ]);\n\n  while (!queue.isEmpty()) {\n    const { node, direction } = queue.dequeue();\n\n    const found =\n      (direction === Direction.Forward && visitedBackward.has(node.pos.toString())) ||\n      (direction === Direction.Backward && visitedForward.has(node.pos.toString()));\n\n    yield { current: node, visited: new Set([...visitedForward, ...visitedBackward]), found };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      const hash = neighbour.toString();\n      let enqueue = false;\n\n      if (direction === Direction.Forward) {\n        if (!visitedForward.has(hash)) {\n          visitedForward.add(hash);\n          enqueue = true;\n        }\n      } else if (!visitedBackward.has(hash)) {\n        visitedBackward.add(hash);\n        enqueue = true;\n      }\n\n      if (enqueue) {\n        const neighbourNode = {\n          node: {\n            pos: neighbour,\n            prev: node,\n          },\n          direction,\n        };\n\n        nodeHistory.push(neighbourNode);\n        queue.enqueue(neighbourNode);\n      }\n    }\n  }\n};\n\nconst rewind = (node: SearchNode): Vec2d[] => {\n  const intersection = nodeHistory\n    .filter(({ node: n }) => node.pos.equals(n.pos))\n    .sort(({ direction }) => (direction === Direction.Forward ? -1 : 1));\n\n  return [...defaultRewind(intersection[0].node), ...defaultRewind(intersection[1].node).reverse()];\n};\n\nconst biDirBfs = { name: \"Bidirectional BFS\", start, rewind };\n\nexport default biDirBfs;\n","export default class Vec2d {\n  constructor(readonly x: number, readonly y: number) {}\n\n  public add(v: Vec2d): Vec2d {\n    return new Vec2d(this.x + v.x, this.y + v.y);\n  }\n\n  public equals(v: Vec2d): boolean {\n    return this.x === v.x && this.y === v.y;\n  }\n\n  public toString(): string {\n    return `(${this.x}, ${this.y})`;\n  }\n\n  public static origin(): Vec2d {\n    return new Vec2d(0, 0);\n  }\n\n  public static random(from: Vec2d, to: Vec2d): Vec2d {\n    return new Vec2d(\n      Math.floor(from.x + Math.random() * (to.x - from.x)),\n      Math.floor(from.y + Math.random() * (to.y - from.y))\n    );\n  }\n}\n","import Maze from \"./Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nconst DIRECTIONS = [\n  { dx: 1, dy: 0 },\n  { dx: 0, dy: 1 },\n  { dx: -1, dy: 0 },\n  { dx: 0, dy: -1 },\n];\n\nconst getAdjacentPositions = (maze: Maze, pos: Vec2d, dist: number = 1): Vec2d[] => {\n  const positions = [];\n\n  for (const { dx, dy } of DIRECTIONS) {\n    const adjPos = pos.add(new Vec2d(dx * dist, dy * dist));\n\n    if (maze.isWithinBounds(adjPos)) {\n      positions.push(adjPos);\n    }\n  }\n\n  return positions;\n};\n\nexport const getAdjacentWallPositions = (maze: Maze, pos: Vec2d, dist: number = 1): Vec2d[] =>\n  getAdjacentPositions(maze, pos, dist).filter((pos) => maze.isWall(pos));\n\nexport const getAdjacentPathPositions = (maze: Maze, pos: Vec2d, dist: number = 1): Vec2d[] =>\n  getAdjacentPositions(maze, pos, dist).filter((pos) => !maze.isWall(pos));\n\nexport const findEmptySquareInBounds = (maze: Maze, from: Vec2d, to: Vec2d): Vec2d => {\n  let square;\n\n  do square = Vec2d.random(from, to);\n  while (maze.isWall(square));\n\n  return square;\n};\n","import Vec2d from \"../utils/Vec2d\";\n\nexport default class Maze {\n  private walls = new Set<string>();\n\n  private constructor(readonly numCols: number, readonly numRows: number) {}\n\n  public static empty(numCols: number, numRows: number): Maze {\n    return new Maze(numCols, numRows);\n  }\n\n  public static full(numCols: number, numRows: number): Maze {\n    const walls = [];\n\n    for (let row = 0; row < numRows; ++row) {\n      for (let col = 0; col < numCols; ++col) {\n        walls.push(new Vec2d(col, row));\n      }\n    }\n\n    return Maze.empty(numCols, numRows).toggleWalls(walls);\n  }\n\n  public toggleWall(pos: Vec2d): Maze {\n    return this.toggleWalls([pos]);\n  }\n\n  public toggleWalls(positions: Vec2d[]): Maze {\n    const maze = Maze.empty(this.numCols, this.numRows);\n    maze.walls = new Set([...this.walls]);\n\n    for (const pos of positions) {\n      if (!this.isWithinBounds(pos)) {\n        throw new Error(`Out of bounds: ${pos.toString()}`);\n      }\n\n      if (maze.isWall(pos)) {\n        maze.walls.delete(pos.toString());\n      } else {\n        maze.walls.add(pos.toString());\n      }\n    }\n\n    return maze;\n  }\n\n  public isWall(pos: Vec2d): boolean {\n    return this.walls.has(pos.toString());\n  }\n\n  public isWithinBounds(pos: Vec2d): boolean {\n    return pos.x >= 0 && pos.y >= 0 && pos.x < this.numCols && pos.y < this.numRows;\n  }\n}\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\nimport { getAdjacentWallPositions, getAdjacentPathPositions } from \"../\";\n\nconst generate = (cols: number, rows: number): Maze => {\n  let maze = Maze.full(cols, rows);\n  const frontier = [Vec2d.random(Vec2d.origin(), new Vec2d(cols, rows))];\n\n  // eslint-disable-next-line no-loop-func\n  while (frontier.some((pos) => maze.isWall(pos))) {\n    // eslint-disable-next-line no-loop-func\n    const cell = randomElement(frontier.filter((pos) => maze.isWall(pos)));\n    maze = maze.toggleWall(cell);\n\n    const adjPath = getAdjacentPathPositions(maze, cell, 2);\n    if (adjPath.length > 0) {\n      const randomPath = randomElement(adjPath);\n      maze = maze.toggleWall(new Vec2d((cell.x + randomPath.x) / 2, (cell.y + randomPath.y) / 2));\n    }\n\n    frontier.push(...getAdjacentWallPositions(maze, cell, 2));\n  }\n\n  return maze;\n};\n\nconst randomElement = <T>(elements: T[]): T => elements[Math.floor(Math.random() * elements.length)];\n\nconst prims = { name: \"Prims\", generate };\n\nexport default prims;\n","import Maze from \"../Maze\";\nimport prims from \"./prims\";\nimport binaryTree from \"./binary-tree\";\nimport random from \"./random\";\n\ntype MazeGenerator = {\n  name: string;\n  generate: (cols: number, rows: number) => Maze;\n};\n\nconst generators: { [key: string]: MazeGenerator } = { prims, binaryTree, random };\n\nexport default generators;\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst generate = (cols: number, rows: number): Maze => {\n  let maze = Maze.empty(cols, rows);\n\n  for (let row = 2; row < rows; row += 2) {\n    for (let col = 2; col < cols; col += 2) {\n      const wallLeftOrUp = [new Vec2d(col - 1, row), new Vec2d(col, row - 1)];\n      maze = maze.toggleWalls([wallLeftOrUp[Math.floor(Math.random() * 2)], new Vec2d(col - 1, row - 1)]);\n    }\n  }\n\n  return maze;\n};\n\nconst random = { name: \"Binary tree\", generate };\n\nexport default random;\n","import Maze from \"../Maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst WALL_PROBABILITY = 1 / 4;\n\nconst generate = (cols: number, rows: number): Maze => {\n  let maze = Maze.empty(cols, rows);\n\n  for (let row = 0; row < rows; ++row) {\n    for (let col = 0; col < cols; ++col) {\n      if (Math.random() < WALL_PROBABILITY) {\n        maze = maze.toggleWall(new Vec2d(col, row));\n      }\n    }\n  }\n\n  return maze;\n};\n\nconst random = { name: \"Random\", generate };\n\nexport default random;\n","import Maze from \"../maze/Maze\";\nimport Vec2d from \"../utils/Vec2d\";\n\nexport type SearchParams = {\n  maze: Maze;\n  start: Vec2d;\n  target: Vec2d;\n};\n\nexport type SearchNode = {\n  pos: Vec2d;\n  prev?: SearchNode;\n};\n\nexport type SearchState = {\n  current: SearchNode;\n  visited: Set<string>;\n  found: boolean;\n};\n\nexport const rewind = (node: SearchNode): Vec2d[] => {\n  const path = [];\n\n  while (node.prev) {\n    path.unshift(node.pos);\n    node = node.prev;\n  }\n\n  return path;\n};\n","export default class Queue<T> {\n  constructor(private items: T[] = []) {}\n\n  public enqueue(...items: T[]): void {\n    this.items.push(...items);\n  }\n\n  public dequeue(): T {\n    if (this.isEmpty()) {\n      throw new Error(\"Cannot dequeue empty queue\");\n    }\n\n    return this.items.shift() as T;\n  }\n\n  public isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  public get size(): number {\n    return this.items.length;\n  }\n}\n","import { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Queue from \"./utils/Queue\";\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n  const queue = new Queue<SearchNode>([{ pos: start }]);\n\n  while (!queue.isEmpty()) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.enqueue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst bfs = { name: \"Breadth-first search\", start, rewind };\n\nexport default bfs;\n","import React, { useRef, useState } from \"react\";\nimport { findEmptySquareInBounds } from \"../maze\";\nimport Maze from \"../maze/Maze\";\nimport mazeGenerators from \"../maze/generators\";\nimport searchMethods from \"../search/methods\";\nimport Vec2d from \"../utils/Vec2d\";\nimport sleep from \"./utils/sleep\";\nimport Controls from \"./Controls\";\nimport MazeComponent from \"./Maze\";\n\ntype PathFinderProps = {\n  mazeSize: {\n    cols: number;\n    rows: number;\n  };\n  mazeStyle: React.CSSProperties;\n};\n\nenum MovingState {\n  None,\n  Start,\n  Target,\n}\n\nconst getInitialMaze = (cols: number, rows: number) => Maze.empty(cols, rows);\nconst getInitialStart = (cols: number, rows: number) => new Vec2d(Math.floor(cols / 4) - 1, Math.floor(rows / 2));\nconst getInitialTarget = (cols: number, rows: number) => new Vec2d(cols - Math.floor(cols / 4), Math.floor(rows / 2));\nconst getInitialVisited = () => new Set<string>();\nconst getInitialSolution = () => new Set<string>();\n\nconst PathFinder = ({ mazeSize: { cols, rows }, mazeStyle }: PathFinderProps): JSX.Element => {\n  const [maze, setMaze] = useState(getInitialMaze(cols, rows));\n  const [start, setStart] = useState(getInitialStart(cols, rows));\n  const [target, setTarget] = useState(getInitialTarget(cols, rows));\n  const [visited, setVisited] = useState(getInitialVisited());\n  const [solution, setSolution] = useState(getInitialSolution());\n\n  const [moving, setMoving] = useState(MovingState.None);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [, setFinishedAt] = useState(Date.now);\n\n  const [mazeGenerator, setMazeGenerator] = useState(\"prims\");\n  const [searchMethod, setSearchMethod] = useState(\"breadthFirstSearch\");\n\n  const currentSearch = useRef<Generator | null>(null);\n  const hasCurrentSearch = (): boolean => currentSearch.current !== null;\n  const setCurrentSearch = (s: Generator | null): void => void (currentSearch.current = s);\n\n  const running = useRef(false);\n  const isRunning = (): boolean => running.current;\n  const setIsRunning = (r: boolean): void => void (running.current = r);\n\n  const handleMouseUp = (): void => {\n    setMoving(MovingState.None);\n    setIsDrawing(false);\n  };\n\n  const handleMouseDown = (pos: Vec2d): void => {\n    if (isRunning()) {\n      return;\n    }\n\n    if (pos.equals(start)) {\n      return setMoving(MovingState.Start);\n    }\n\n    if (pos.equals(target)) {\n      return setMoving(MovingState.Target);\n    }\n\n    setIsDrawing(true);\n    setMaze(maze.toggleWall(pos));\n  };\n\n  const handleMouseEnter = (pos: Vec2d): void => {\n    if (moving !== MovingState.None && !maze.isWall(pos)) {\n      return moving === MovingState.Start ? setStart(pos) : setTarget(pos);\n    }\n\n    if (isDrawing && !pos.equals(start) && !pos.equals(target)) {\n      setMaze(maze.toggleWall(pos));\n    }\n  };\n\n  const handleStartClick = async (): Promise<void> => {\n    setIsRunning(true);\n\n    if (!hasCurrentSearch()) {\n      setCurrentSearch(generateSearch());\n      setSolution(getInitialSolution());\n    }\n\n    let next;\n\n    do {\n      // @ts-ignore\n      next = currentSearch.current.next();\n      if (next.value) next.value();\n      if (!isRunning()) return;\n      await sleep(8);\n    } while (!next.done);\n\n    setCurrentSearch(null);\n    setIsRunning(false);\n    setFinishedAt(Date.now);\n  };\n\n  const generateSearch = function* (): Generator<() => void> {\n    const method = searchMethods[searchMethod];\n\n    for (const state of method.start({ maze, start, target })) {\n      yield () => setVisited(new Set([...state.visited]));\n\n      if (state.found) {\n        const solution = getInitialSolution();\n        setSolution(solution);\n\n        for (const pos of method.rewind(state.current)) {\n          yield () => setSolution(new Set([...solution.add(pos.toString())]));\n        }\n\n        return;\n      }\n    }\n  };\n\n  const handleStopClick = (): void => setIsRunning(false);\n\n  const handleClearClick = (): void => {\n    setMaze(getInitialMaze(cols, rows));\n    setStart(getInitialStart(cols, rows));\n    setTarget(getInitialTarget(cols, rows));\n    setVisited(getInitialVisited());\n    setSolution(getInitialSolution());\n    setCurrentSearch(null);\n    setIsRunning(false);\n  };\n\n  const handleGenerateClick = (): void => {\n    handleClearClick();\n\n    const maze = mazeGenerators[mazeGenerator].generate(cols, rows);\n    const start = findEmptySquareInBounds(maze, Vec2d.origin(), new Vec2d(cols / 3, rows));\n    const target = findEmptySquareInBounds(maze, new Vec2d((cols * 2) / 3, 0), new Vec2d(cols, rows));\n\n    setMaze(maze);\n    setStart(start);\n    setTarget(target);\n  };\n\n  const handleMazeGeneratorSelect = (e: any): void => setMazeGenerator(e.target.value);\n  const handleSearchMethodSelect = (e: any): void => setSearchMethod(e.target.value);\n\n  const getSquareClassName = (pos: Vec2d): string => {\n    if (maze.isWall(pos)) {\n      return \"is-wall\";\n    }\n\n    if (start.equals(pos)) {\n      return \"is-start\";\n    }\n\n    if (target.equals(pos)) {\n      return \"is-target\";\n    }\n\n    if (solution.has(pos.toString())) {\n      return \"is-solution\";\n    }\n\n    if (visited.has(pos.toString())) {\n      return \"is-visited\";\n    }\n\n    return \"\";\n  };\n\n  return (\n    <div className={`PathFinder${isRunning() ? \" is-running\" : \"\"}`}>\n      <Controls\n        isRunning={isRunning()}\n        onStartClick={handleStartClick}\n        onStopClick={handleStopClick}\n        onClearClick={handleClearClick}\n        onGenerateClick={handleGenerateClick}\n        selectedMazeGenerator={mazeGenerator}\n        selectedSearchMethod={searchMethod}\n        onMazeGeneratorSelect={handleMazeGeneratorSelect}\n        onSearchMethodSelect={handleSearchMethodSelect}\n      />\n      <MazeComponent\n        numRows={rows}\n        numCols={cols}\n        style={mazeStyle}\n        getSquareClassName={getSquareClassName}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default PathFinder;\n","import PriorityQueue from \"ts-priority-queue\";\nimport { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\nimport Vec2d from \"../../utils/Vec2d\";\n\nconst manhattanDistance = (a: Vec2d, b: Vec2d): number => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\nconst start = function* ({ maze, start, target }: SearchParams): Generator<SearchState> {\n  const visited = new Set<string>([start.toString()]);\n\n  const queue = new PriorityQueue<SearchNode>({\n    comparator: (a, b) => manhattanDistance(a.pos, target) - manhattanDistance(b.pos, target),\n    initialValues: [{ pos: start }],\n  });\n\n  while (queue.length > 0) {\n    const node = queue.dequeue();\n\n    yield { current: node, visited, found: node.pos.equals(target) };\n\n    for (const neighbour of getAdjacentPathPositions(maze, node.pos)) {\n      const hash = neighbour.toString();\n\n      if (!visited.has(hash)) {\n        visited.add(hash);\n        queue.queue({ pos: neighbour, prev: node });\n      }\n    }\n  }\n};\n\nconst greedyBestFirstSearch = { name: \"Greedy best-first search\", start, rewind };\n\nexport default greedyBestFirstSearch;\n","import { SearchNode, SearchParams, SearchState, rewind } from \"../\";\nimport { getAdjacentPathPositions } from \"../../maze\";\n\nconst dfs = function* (node: SearchNode, visited: Set<string>, params: SearchParams): Generator<SearchState> {\n  yield { current: node, visited, found: node.pos.equals(params.target) };\n\n  for (const neighbour of getAdjacentPathPositions(params.maze, node.pos)) {\n    const hash = neighbour.toString();\n\n    if (!visited.has(hash)) {\n      visited.add(hash);\n      yield* dfs({ pos: neighbour, prev: node }, visited, params);\n    }\n  }\n};\n\nconst start = function* (params: SearchParams): Generator<SearchState> {\n  yield* dfs({ pos: params.start }, new Set([params.start.toString()]), params);\n};\n\nconst depthFirstSearch = { name: \"Depth-first search\", start, rewind };\n\nexport default depthFirstSearch;\n","import { SearchNode, SearchParams, SearchState } from \"../\";\nimport breadthFirstSearch from \"./breadth-first-search\";\nimport biDirectionalBfs from \"./bidirectional-bfs\";\nimport greedBestFirstSearch from \"./greedy-best-first-search\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport Vec2d from \"../../utils/Vec2d\";\n\ntype SearchMethod = {\n  name: string;\n  start: (params: SearchParams) => Generator<SearchState>;\n  rewind: (node: SearchNode) => Vec2d[];\n};\n\nconst methods: { [key: string]: SearchMethod } = {\n  breadthFirstSearch,\n  biDirectionalBfs,\n  greedBestFirstSearch,\n  depthFirstSearch,\n};\n\nexport default methods;\n","const sleep = async (ms: number): Promise<void> => {\n  await new Promise((r) => setTimeout(r, ms));\n};\n\nexport default sleep;\n","import { FormEvent } from \"react\";\nimport mazeGenerators from \"../maze/generators\";\nimport searchMethods from \"../search/methods\";\n\ntype ControlsProps = {\n  isRunning: boolean;\n  onStartClick: () => void;\n  onStopClick: () => void;\n  onClearClick: () => void;\n  onGenerateClick: () => void;\n  selectedMazeGenerator: string;\n  selectedSearchMethod: string;\n  onMazeGeneratorSelect: (e: FormEvent<HTMLSelectElement>) => void;\n  onSearchMethodSelect: (e: FormEvent<HTMLSelectElement>) => void;\n};\n\nconst Controls = (props: ControlsProps): JSX.Element => (\n  <div className=\"Controls\">\n    <fieldset>\n      <legend>Maze generator</legend>\n      <select onChange={props.onMazeGeneratorSelect} value={props.selectedMazeGenerator}>\n        {Object.entries(mazeGenerators).map(([key, generator]) => (\n          <option key={key} value={key}>\n            {generator.name}\n          </option>\n        ))}\n      </select>\n      <button onClick={props.onGenerateClick} disabled={props.isRunning}>\n        Generate\n      </button>\n      <button onClick={props.onClearClick} disabled={props.isRunning}>\n        Clear\n      </button>\n    </fieldset>\n    <fieldset>\n      <legend>Search method</legend>\n      <select onChange={props.onSearchMethodSelect} value={props.selectedSearchMethod}>\n        {Object.entries(searchMethods).map(([key, method]) => (\n          <option key={key} value={key}>\n            {method.name}\n          </option>\n        ))}\n      </select>\n      <button onClick={props.isRunning ? props.onStopClick : props.onStartClick}>\n        {props.isRunning ? \"Stop\" : \"Start\"}\n      </button>\n    </fieldset>\n  </div>\n);\n\nexport default Controls;\n","import React from \"react\";\nimport Vec2d from \"../utils/Vec2d\";\n\ntype MazeProps = {\n  numRows: number;\n  numCols: number;\n  style: React.CSSProperties;\n  getSquareClassName: (pos: Vec2d) => string;\n  onMouseUp: (pos: Vec2d) => void;\n  onMouseDown: (pos: Vec2d) => void;\n  onMouseEnter: (pos: Vec2d) => void;\n};\n\nconst Maze = (props: MazeProps): JSX.Element => {\n  const squares = [];\n\n  for (let row = 0; row < props.numRows; ++row) {\n    for (let col = 0; col < props.numCols; ++col) {\n      const pos = new Vec2d(col, row);\n\n      squares.push(\n        <div\n          key={pos.toString()}\n          className={props.getSquareClassName(pos)}\n          onMouseUp={() => props.onMouseUp(pos)}\n          onMouseDown={() => props.onMouseDown(pos)}\n          onMouseEnter={() => props.onMouseEnter(pos)}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"Maze\" style={props.style}>\n      {squares}\n    </div>\n  );\n};\n\nexport default Maze;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PathFinder from \"./Components/PathFinder\";\nimport \"./index.css\";\n\nconst buildPathFinderProps = () => {\n  // @ts-ignore\n  const bodyPadding = parseInt(getComputedStyle(document.body).getPropertyValue(\"padding-left\"));\n  // @ts-ignore\n  const headerHeight = parseInt(getComputedStyle(document.querySelector(\"header\")).getPropertyValue(\"height\"));\n  const squareWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue(\"--square-width\"));\n\n  const cols = Math.floor((window.innerWidth - 2 * bodyPadding) / squareWidth);\n  const rows = Math.max(5, Math.floor((window.innerHeight - 3 * headerHeight) / squareWidth));\n\n  return {\n    mazeSize: { cols, rows },\n    mazeStyle: {\n      gridTemplateColumns: `repeat(${cols}, ${squareWidth}px)`,\n      gridTemplateRows: `repeat(${rows}, ${squareWidth}px)`,\n    },\n  };\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathFinder {...buildPathFinderProps()} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}